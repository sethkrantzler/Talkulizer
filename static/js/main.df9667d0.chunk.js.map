{"version":3,"sources":["ColorPalette.ts","MathUtils.ts","HelpDialog.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ColorPalettes","name","palette_6","palette_11","calculateVectorBetweenVectors","x1","x2","y1","y2","angle","Math","atan2","calculateAngleBetweenVectors","angleToVector","sin","cos","useStyles","makeStyles","theme","title","textAlign","fontSize","containsText","color","padding","seperator","border","borderRadius","width","shortcutItem","paddingLeft","shortcutHeaders","fontWeight","inputButton","backgroundColor","blue","margin","buttonContainer","display","justifyContent","shortcuts","key","text","HelpDialog","props","classes","close","open","setSpeakerAsInput","setMicAsInput","Dialog","onClose","DialogTitle","className","DialogContentText","Button","onClick","List","ListItem","ListItemText","primary","map","shortcut","StandardBox","geoRef","useRef","lineRef","topVertices","bufferLength","amplitudeArray","Uint8Array","useEffect","analyzer","frequencyBinCount","getByteFrequencyData","useFrame","current","vertices","freqData","nums","freqArray","subarray","freqRange","start","end","freqAvg","length","reduce","a","b","i","y","height","updateHeight","verticesNeedUpdate","ref","scale","rotation","rot","attach","WaveformLine","linePoints","push","Vector2","size","getByteTimeDomainData","setFromPoints","points","graphFrequencyData","HorizontalLine","random","waveFunc","pow","exp","abs","x","PI","Date","now","VerticalLine","Plane","freqRanges","material","set","loudestAmp","loudestBand","range","index","averageAmp","getColor","z","args","side","DoubleSide","Cube","Ring","scaleRate","offset","n","stepSize","t","indexStart","ringWidth","ringFuzz","position","radius","ringSize","Bolt","Circle","average","bolt","circleFuzz","Racecar","hasSetMesh","useState","pos","setPos","setShape","geometry","newRotation","newPosition","loop","seperate","newT","speed","lineWidth","Vector3","calculatePosition","offaxis","lookAt","movementVector","Noise","Wire","QuadraticBezierCurve3","getPoints","flat","fuzz","useUpdate","App","dbUrl","isLocalHost","sliderLabels","param1","param2","spread","setSpeakerAsSource","speaker","MediaStream","navigator","mediaDevices","getDisplayMedia","video","audio","then","stream","fetchPresets","randomPreset","addTrack","getAudioTracks","clone","getVideoTracks","stop","removeTrack","handleAudio","catch","console","error","setState","showHelp","setMicrophoneAsSource","getUserMedia","audioError","initializeAudioAnalyser","audioContext","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","smoothingTimeConstant","connect","err","log","alert","backgroundChanged","colorString","css","document","getElementById","style","bgColor","toggleUi","showUi","state","opacity","visualizerChanged","e","visualizerType","target","value","paletteChanged","colorIndex","parseInt","presetNameChanged","presetName","spreadChanged","val","offsetChanged","param1Changed","param2Changed","onSavePreset","axios","post","onPresetSelected","floor","presets","selectedPreset","randomCycle","shouldCycle","helpClicked","sourceOptions","cycleTime","currentInterval","Boolean","window","location","hostname","match","addEventListener","this","onKeyPressed","bind","removeEventListener","toLowerCase","showAlertText","alertText","setCycleInterval","clearCycleInterval","clearInterval","setInterval","get","resp","data","fetch","headers","response","json","alertDiv","child","firstChild","removeChild","textDiv","createElement","innerHTML","appendChild","total","toString","slice","bins","binWidth","boxes","boxWidth","maxX","extraRot","theta","fidelity","lines","standard","waveform","standardRing","horizontalLines","verticalLines","circular","rings","solidColor","cube","wires","id","variant","FormControl","InputLabel","defaultValue","onChange","Select","label","o","MenuItem","p","TextField","placeholder","disabled","Slider","step","min","max","valueLabelDisplay","onKeyDown","intensity","renderVisualizer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.df9667d0.chunk.js","sourcesContent":["interface ColorPalette {\r\n    name: string;\r\n    palette_6: string[];\r\n    palette_11: string[];\r\n}\r\n\r\nexport const ColorPalettes: ColorPalette[] = [\r\n    {\r\n        name: 'Rainbow',\r\n        palette_6: [\"#A800FF\", \"#0079FF\", \"#00F11D\", \"#FFEF00\", \"#FF7F00\", \"#FF0900\"],\r\n        palette_11: [\"#8D5BFF\", \"#6D5BFF\", \"#5B8FFF\", \"#5BFFE7\", \"#5BFF76\", \"#CAFF5B\", \"#FFE05B\", \"#FFA75B\", \"#FF6B5B\", \"#FF5B89\", \"#FF2E37\"]\r\n    },\r\n    {\r\n        name: 'SL2T_1',\r\n        palette_6: [\"#46237A\", \"#FFB400\", \"#CFFFB3\", \"#337CA0\", \"#EE5622\", \"#3A5311\"],\r\n        palette_11: [\"#46237A\", \"#D1B1CB\", \"#DDCAD9\", \"#FFB400\", \"#EE5622\", \"#337CA0\", \"3891A6\", \"#2EC4B6\", \"#9FC490\", \"#CFFFB3\", \"#3A5311\"]\r\n    },\r\n    {\r\n        name: 'Cyberpunk',\r\n        palette_6: [\"#2d00f7\", \"#8900f2\", \"#b100e8\", \"#db00b6\", \"#f20089\", \"#faff00\"],\r\n        palette_11: [\"#2d00f7\", \"#6a00f4\", \"#8900f2\", \"#a100f2\", \"#b100e8\", \"#bc00dd\", \"#db00b6\", \"#e500a4\", \"#f20089\", \"#faff00\", \"#faff09\"]\r\n    },\r\n    {\r\n        name: 'Ocean',\r\n        palette_6: [\"#014f86\", \"#2c7da0\", \"#468faf\", \"#90e0ef\", \"#ade8f4\", \"#caf0f8\"],\r\n        palette_11: [\"#013a63\", \"#01497c\", \"#014f86\", \"#2a6f97\", \"#2c7da0\", \"#2c7da0\", \"#468faf\", \"#61a5c2\", \"#89c2d9\", \"#a9d6e5\", \"#caf0f8\"]\r\n    },\r\n    {\r\n        name: 'Sunset',\r\n        palette_6: [\"#d00000\", \"#dc2f02\", \"#e85d04\", \"#f48c06\", \"#faa307\", \"#ffba08\"],\r\n        palette_11: [\"#6a040f\",\"#d00000\",\"#dc2f02\", \"#dc2f02\", \"#e85d04\", \"#EE5622\", \"#f48c06\", \"#faa307\", \"#ffba12\", \"#ffba08\", \"#faff00\"]\r\n    },\r\n    {\r\n        name: 'Earth',\r\n        palette_6: [\"#606c38\", \"#283618\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"],\r\n        palette_11: [\"#606c38\", \"#ccd5ae\", \"#e9edc9\", \"#d4a373\", \"#edf2f4\", \"#283618\",\"#faedcd\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"]\r\n    },\r\n    {\r\n        name: 'Cherry Blossom',\r\n        palette_6: [\"#D6B95A\", \"#69306D\", \"#A5668B\", \"#4CBFAC\", \"#D00000\", \"#F2D7EE\"],\r\n        palette_11: [\"#D6B95A\", \"#DEFFF2\", \"#4CBFAC\", \"#F2D7EE\", \"#A1275D\", \"#FFFFFF\",\"#A1275D\", \"#F2D7EE\", \"#4CBFAC\", \"#DEFFF2\", \"#D6B95A\"]\r\n    },\r\n]\r\n\r\n// {\r\n//     name: '',\r\n//     palette_6: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\r\n//     palette_11: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\",\"#\", \"#\", \"#\", \"#\", \"#\"]\r\n// },\r\n    ","export const vectorToAngle = (x: number, y: number): number => {\r\n    return Math.atan2(x, y)\r\n}\r\n\r\nexport const calculateAngleBetweenVectors = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    return Math.atan2((x1 - x2), (y1 - y2))\r\n}\r\n\r\nexport const calculateVectorBetweenVectors = (x1: number, x2: number, y1: number, y2: number): [number, number] => {\r\n    const angle = calculateAngleBetweenVectors(x1, x2, y1, y2)\r\n    return angleToVector(angle)\r\n}\r\n\r\nexport const angleToVector = (angle: number): [number, number] => {\r\n    const xVector = Math.sin(angle)\r\n    const yVector = Math.cos(angle)\r\n\r\n    return [xVector, yVector]\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport { Dialog, DialogTitle, List, ListItem, ListItemAvatar, Avatar, ListItemText, DialogContentText, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        textAlign: 'center',\r\n        '& h2': {\r\n            fontSize: '2.25em'\r\n        }\r\n    },\r\n    containsText: {\r\n        color: 'black',\r\n        padding: '10px',\r\n    },\r\n    seperator: {\r\n        border: \"1px solid black\",\r\n        borderRadius: '75px',\r\n        width: '80%'\r\n    },\r\n    shortcutItem:{\r\n        paddingLeft: '20%',\r\n    },\r\n    shortcutHeaders:{\r\n        paddingLeft: '20%',\r\n        '& span': {\r\n            fontWeight: 'bold'\r\n        }\r\n    },\r\n    inputButton: {\r\n        backgroundColor: blue[100],\r\n        color: 'black',\r\n        width: '33%',\r\n        margin: '20px'\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\n\r\nconst shortcuts = [\r\n    {\r\n        key: \"R\",\r\n        text: \"Random Preset\"\r\n    },\r\n    {\r\n        key: \"C\",\r\n        text: \"Toggle automatic cycling\"\r\n    },\r\n    {\r\n        key: \"Up\",\r\n        text: \"Increase cycle period\"\r\n    },\r\n    {\r\n        key: \"Down\",\r\n        text: \"Decrease cycle period\"\r\n    },\r\n    {\r\n        key: \"G\",\r\n        text: \"Green Screen Background\"\r\n    },\r\n    {\r\n        key: \"B\",\r\n        text: \"Blue Screen Background\"\r\n    },\r\n    {\r\n        key: \"H\",\r\n        text: \"Random Background\"\r\n    },\r\n    {\r\n        key: \"U\",\r\n        text: \"Toggle UI\"\r\n    },\r\n];  \r\n\r\nexport default function HelpDialog(props: any) {\r\n    const classes = useStyles();\r\n    const { close, open, setSpeakerAsInput, setMicAsInput } = props;\r\n\r\n    const welcomeText = \"Before we can start, you'll need to decide whether you want to use your computer's microphone or your speakers as the visualizer's input. (NOTE: If you select 'Speakers', a menu will pop up asking you to select your source. If on Windows, select any screen, and make sure the 'Share Audio' button in the bottom left is selected. On Mac, this option is only present from selecting a chrome tab, so any audio you want to visualize will need to come from that tab.)\";\r\n\r\n    const shortcutText = \"I made this audio visualizer to be fully customizable, there's over 20 different visualiztion types, with multiple parameters to change each one. I've provided over 75 presets from my testing that look cool, but play around and find what you think looks cool! Here are some handy shortcuts that I've made to help make using the visualizer easier.\";\r\n\r\n    return (\r\n        <Dialog onClose={close} open={open}>\r\n            <DialogTitle className={classes.title}>Welcome to the Talkulizer!</DialogTitle>\r\n            <DialogContentText className={classes.containsText}>{welcomeText}</DialogContentText>\r\n            <div className={classes.buttonContainer}>\r\n                <Button className={classes.inputButton} onClick={setSpeakerAsInput}>Speakers</Button>\r\n                <Button className={classes.inputButton} onClick={setMicAsInput}>Mic</Button>\r\n            </div>\r\n            <hr className={classes.seperator}></hr>\r\n            <DialogContentText className={classes.containsText}>{shortcutText}</DialogContentText>\r\n            <List>\r\n                <ListItem className={classes.shortcutHeaders} key={\"headers\"}>\r\n                    <ListItemText primary={\"Key\"} />\r\n                    <ListItemText primary={\"Description\"} />\r\n                </ListItem>\r\n                {shortcuts.map((shortcut) => (\r\n                <ListItem className={classes.shortcutItem} key={shortcut.key}>\r\n                    <ListItemText primary={shortcut.key} />\r\n                    <ListItemText primary={shortcut.text} />\r\n                </ListItem>\r\n                ))}\r\n            </List>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nHelpDialog.propTypes = {\r\n    close: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    setSpeakerAsInput: PropTypes.func.isRequired,\r\n    setMicAsInput: PropTypes.func.isRequired\r\n};","import ReactDOM from 'react-dom';\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useResource, useThree, useUpdate } from 'react-three-fiber';\r\nimport { BufferGeometry, CircleBufferGeometry, CircleGeometry, Color, EdgesGeometry, Geometry, LineBasicMaterial, Mesh, Points, Scene, Vector2, DoubleSide, CubicBezierCurve3, Vector3, QuadraticBezierCurve3} from 'three';\r\nimport './App.css';\r\nimport { Input, MenuItem, Select, TextField, Slider, Button, InputLabel, FormControl, Dialog } from '@material-ui/core';\r\nimport { ColorPalettes } from './ColorPalette';\r\nimport axios from 'axios';\r\nimport { calculateVectorBetweenVectors, vectorToAngle } from './MathUtils';\r\nimport { Dictionary } from 'ts-json-db/dist/src';\r\nimport { ColorPicker } from 'material-ui-color';\r\nimport HelpDialog from './HelpDialog';\r\n\r\ninterface FrequencyRange {\r\n  start: number;\r\n  end: number;\r\n  color?: string;\r\n}\r\n\r\ninterface SliderOptions{\r\n  param1: string;\r\n  param2: string;\r\n  offset: string;\r\n  spread: string;\r\n}\r\n\r\ninterface Preset {\r\n  presetName: string;\r\n  visualizerType: string,\r\n  colorIndex: number,\r\n  spread: number,\r\n  offset: number,\r\n  param1: number,\r\n  param2: number,\r\n  bgColor: string\r\n}\r\n\r\nfunction StandardBox(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const topVertices = [true,true,false,false, true, true, false, false];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function updateHeight(vertices: Vector3[], freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i=0; i < vertices.length; i++){\r\n      vertices[i].y = !topVertices[i] ? 0 : props.height*freqAvg/(255.0);\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      updateHeight(geoRef.current.vertices, amplitudeArray);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        ref={lineRef}\r\n        {...props}\r\n        scale={[1.0*props.width, 1, 0]}\r\n        rotation={[0,0, !!props.rot ? props.rot : 0]}\r\n      >\r\n        <boxGeometry ref={geoRef} attach=\"geometry\" />\r\n        <meshBasicMaterial color={props.color} />\r\n      </mesh>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nfunction WaveformLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 2048;\r\n  const size = 12.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size/2 + (-2*size*i/lineSegments), 0));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array) {\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (freqData[i]-128.0)* props.height / 128.0;\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction HorizontalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction VerticalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].x = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].y)*0.65)*Math.cos(2*Math.PI*points[i].y + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction Plane(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <planeBufferGeometry ref={geoRef} args={[3,3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Cube(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <boxBufferGeometry ref={geoRef} args={[3,3, 3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Ring(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function ringFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0));\r\n    const n = props.n > 2 ? props.n : 2;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = !props.indexStart ? i*stepSize : i+1.0*stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(n*t))*Math.cos(t + Date.now() * 0.001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(n*t))*Math.sin(t + Date.now() * 0.001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n     if (lineRef && lineRef.current && geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.vertices = ringFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n      if (lineRef.current.scale.x > 10) {\r\n        lineRef.current.scale.set(0.01, 0.01, 1);\r\n        lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.radius, props.radius, 1]}>\r\n      <ringGeometry ref={geoRef} args={[1-(props.ringSize/2.0), 1+(props.ringSize/2.0), 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Bolt(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[ 1, 1, 1]}>\r\n      <circleBufferGeometry ref={geoRef} args={[1, 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Circle(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n\r\n  useEffect(()=> {\r\n    for (let i = 0; i < lineSegments; i++) {\r\n      linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n    }\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function circleFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0))*0.1;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = i+1 * stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(props.n*t))*Math.cos(t + Date.now() * 0.0001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(props.n*t))*Math.sin(t + Date.now() * 0.0001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      if (props.bolt) {\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n      }\r\n      else {\r\n        lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.vertices = circleFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n        geoRef.current.verticesNeedUpdate = true;\r\n        if (lineRef.current.scale.x > 10) {\r\n          lineRef.current.scale.set(0.01, 0.01, 1);\r\n          lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.bolt ? 1 : props.radius, props.bolt ? 1 : props.radius, 1]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Racecar(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].x = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else{\r\n        const movementVector = calculateVectorBetweenVectors(lineRef.current.position.x, newPosition.x, newPosition.y, lineRef.current.position.y);\r\n        const angle = vectorToAngle(movementVector[0], movementVector[1]);\r\n        lineRef.current.rotation.z = angle+(Math.PI/2);\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Noise(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].z = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else {\r\n        lineRef.current.lookAt(new Vector3(newPosition.x, newPosition.y, 1));\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Wire(props: any) {\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const curve = new QuadraticBezierCurve3(\r\n    new Vector3( 0, 1, 0 ),\r\n    new Vector3( 0, 0.25, 0.2 ),\r\n    new Vector3( 0, 0, 1 )\r\n  );\r\n\r\n  const points = curve.getPoints(1024);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.flat) {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].y = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z);\r\n      }\r\n    }\r\n    else if (props.fuzz){\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = Math.random()*(freqAvg/(255.0));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z); \r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(points, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n\r\n  const geoRef = useUpdate((geometry: BufferGeometry) => {\r\n    geometry.setFromPoints(points)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, 30*Math.PI/180, 0]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default class App extends React.Component<any, any> {\r\n  private dbUrl: string;\r\n  private isLocalHost: Boolean;\r\n  private sliderLabels: Record<string, SliderOptions> = {\r\n    'standard': {\r\n      param1: 'Bars',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'waveform': {\r\n      param1: 'Lines',\r\n      param2: 'z',\r\n      offset: 'Height',\r\n      spread: '',\r\n    },\r\n    'standardRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'foldingRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'horizontalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'verticalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'circular': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'bolt': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'rings': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'fractal': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'solid': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'cube': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'wires': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'flat': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'racecar': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'racecar_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    }\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      analyzer: null, \r\n      visualizerType: \"standard\",\r\n      spread: 1,\r\n      offset: 1.3,\r\n      param1: 2,\r\n      param2: 0.2,\r\n      colorIndex: 0,\r\n      presetName: \"\",\r\n      selectedPreset: 0,\r\n      presets: [],\r\n      sourceOptions: [],\r\n      shouldCycle: false,\r\n      cycleTime: 2000,\r\n      currentInterval: null,\r\n      bgColor: \"#040d1b\",\r\n      showHelp: true,\r\n      showUi: true\r\n    };\r\n    this.dbUrl = \"http://localhost:3001/presets\";\r\n    this.isLocalHost  = Boolean(\r\n      window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(\r\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n    );\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n  }\r\n\r\n  onKeyPressed(e: any) {\r\n    switch(e.key.toLowerCase()){\r\n      case \"r\":\r\n        this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n        this.showAlertText(\"Random Preset\");\r\n        break;\r\n      case \"c\":\r\n        this.setState({shouldCycle: !this.state.shouldCycle});\r\n        let alertText = this.state.shouldCycle ? `Cycle (${this.state.cycleTime / 1000}s)` : \"Cycle (Off)\";\r\n        if (this.state.shouldCycle) {\r\n          this.setCycleInterval(this.state.cycleTime);\r\n        }\r\n        else {\r\n          this.clearCycleInterval();\r\n        }\r\n        this.showAlertText(alertText);\r\n        break;\r\n      case \"g\":\r\n        this.backgroundChanged(\"#00ff00\");\r\n        this.showAlertText(\"Green Background\");\r\n        break;\r\n      case \"b\":\r\n        this.backgroundChanged(\"#0000ff\");\r\n        this.showAlertText(\"Blue Background\");\r\n        break;\r\n      case \"h\":\r\n        this.backgroundChanged(this.getColor(null, null));\r\n        this.showAlertText(\"Random Background\");\r\n        break;\r\n      case \"arrowup\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime < 1000){\r\n          this.setState({cycleTime: 1000});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime + 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime + 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      case \"arrowdown\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime <= 1000){\r\n          this.setState({cycleTime: 500});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime - 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime - 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      case \"u\":\r\n        this.toggleUi();\r\n        this.showAlertText(this.state.showUi ? `Toggle UI (On)` : \"Toggle UI (Off)\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  clearCycleInterval(){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n  }\r\n\r\n  setCycleInterval(cycleTime: number){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n    this.setState({currentInterval: setInterval(this.randomPreset, cycleTime)});\r\n  }\r\n\r\n  setSpeakerAsSource = () => {\r\n    let speaker = new MediaStream;\r\n    const mediaDevices = navigator.mediaDevices as any;\r\n    mediaDevices.getDisplayMedia({\r\n        video: true ,\r\n        audio: true\r\n    }).then((stream: MediaStream) => {\r\n        this.fetchPresets().then(this.randomPreset);\r\n        speaker.addTrack(stream.getAudioTracks()[0].clone());\r\n        // stopping and removing the video track to enhance the performance\r\n        stream.getVideoTracks()[0].stop();\r\n        stream.removeTrack(stream.getVideoTracks()[0]);\r\n        this.handleAudio(speaker);\r\n    }).catch(() => {\r\n        console.error('failed')\r\n    });\r\n    this.setState({showHelp: false})\r\n  }\r\n\r\n  setMicrophoneAsSource = () => {\r\n    navigator.mediaDevices.getUserMedia({audio: true })\r\n    .then(this.handleAudio)\r\n    .catch(this.audioError);\r\n    this.fetchPresets().then(this.randomPreset);\r\n    this.setState({showHelp: false})\r\n  }\r\n\r\n  fetchPresets(){\r\n    if (!this.isLocalHost){\r\n      return fetch('presetDb.json', {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      }\r\n      )\r\n        .then(function(response){\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({presets: json.presets});\r\n        });\r\n    }\r\n    else {\r\n      return axios.get(this.dbUrl).then((resp) => {\r\n        this.setState({presets: resp.data})\r\n      });\r\n    }\r\n  }\r\n\r\n  showAlertText(text: string){\r\n    let alertDiv = document.getElementById(\"alert-text\");\r\n    let child = alertDiv.firstChild;\r\n    if (!!child){\r\n      alertDiv.removeChild(child)\r\n    }\r\n    let textDiv = document.createElement(\"div\");\r\n    textDiv.className = \"fade\";\r\n    textDiv.innerHTML = text;\r\n    alertDiv.appendChild(textDiv);\r\n  }\r\n\r\n  initializeAudioAnalyser = (stream: MediaStream) => {\r\n    const audioContext = new AudioContext();\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    analyser.smoothingTimeConstant = 0.5;\r\n    source.connect(analyser);\r\n    this.setState({\r\n      analyzer: analyser\r\n    })\r\n  }\r\n\r\n  handleAudio = (stream: MediaStream) => {\r\n    this.initializeAudioAnalyser(stream);\r\n  }\r\n\r\n  audioError = (err: any) => {\r\n    console.log(err);\r\n    alert(\"Something went wrong: \" + err.name);\r\n  }\r\n\r\n  getColor(index: number, total: number){\r\n    return \"#\" + Math.random().toString(16).slice(2, 8);\r\n  }\r\n\r\n  standard(height: number, spread: number, bins: number, width: number) {\r\n    const maxX = 18;\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let boxWidth = ((maxX*2.0)/bins) - spread;\r\n      let x = - (maxX+(maxX/bins)) + (2*maxX/bins)*(i+1);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={boxWidth} height={height} position={[x,0.5,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} />)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>\r\n      \r\n    )\r\n  }\r\n\r\n  standardRing(height: number, spread: number, bins: number, radius: number, extraRot: number) {\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let theta = i*Math.PI*2/bins;\r\n      let x = radius*Math.cos(theta);\r\n      let y = radius*Math.sin(theta);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={spread} height={height} position={[x,y,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} rot={Math.PI + theta + (Math.PI/2)*extraRot}/>)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  waveform(fidelity: number, height: number, bins: number, z: number) {\r\n    let lines = [];\r\n    const yMax = 2;\r\n    height = height > 0 ? height*2 : 0.1;\r\n    for (let i=0; i<bins; i++){\r\n      let y = - (yMax+(yMax/bins)) + (2*yMax/bins)*(i+1);\r\n      lines.push(<WaveformLine analyzer={this.state.analyzer} position={[0,y,-z]} color={this.getColor(i, bins)} height={height} />);\r\n    };\r\n    return (\r\n      <>\r\n        {lines}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  horizontalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[0, (spread*-2) - offset, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[0, (spread*-1) - offset, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[0, 0 - offset, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[0, (spread*1) - offset, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[0, (spread*2) - offset, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[0, (spread*3) - offset, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  solidColor() {\r\n    return (\r\n      <>\r\n        <Plane analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  cube() {\r\n    return (\r\n      <>\r\n        <Cube analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  bolt() {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  circular(n: number, ringWidth: number) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  Racecar(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  Noise(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rings(ringSize: number, indexStart: number, n: number, ringWidth: number) {\r\n    const numRings = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numRings;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  verticalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[(spread*-2) - offset, 0, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[(spread*-1) - offset, 0, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[ 0 - offset, 0, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[(spread*1) - offset, 0, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[(spread*2) - offset, 0, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[(spread*3) - offset, 0, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  wires(spread: number, flat: boolean) {\r\n    return (\r\n      <>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[0]} freqRange={{start: 0, end:  2}} position = {[0,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[1]} freqRange={{start: 4, end:  10}} position = {[0 + spread,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[2]} freqRange={{start: 12, end:  16}} position = {[0 + spread*2,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[3]} freqRange={{start: 18, end:  22}} position = {[0 + spread*3,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[4]} freqRange={{start: 40, end:  60}} position = {[0 + spread*4,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[5]} freqRange={{start: 62, end:  80}} position = {[0 + spread*5,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[6]} freqRange={{start: 82, end:  100}} position = {[0 + spread*6,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[7]} freqRange={{start: 100, end:  140}} position = {[0 + spread*7,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[8]} freqRange={{start: 146, end:  190}} position = {[0 + spread*8,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[9]} freqRange={{start: 264, end:  542}} position = {[0 + spread*9,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[10]} freqRange={{start: 550, end:  852}} position = {[0 + spread*10,0,0]}  flat={flat}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderVisualizer(visualizerType: string, spread: number, offset: number, param1: number, param2: number){\r\n    switch(visualizerType) { \r\n      case \"standard\": { \r\n        return this.standard(spread, offset, param1, param2);\r\n      }\r\n      case \"waveform\": { \r\n        return this.waveform(spread, offset, param1, param2);\r\n      }\r\n      case \"standardRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 1);\r\n      }\r\n      case \"foldingRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 0);\r\n      }\r\n      case \"horizontalLines\": { \r\n        return this.horizontalLines(spread, offset);\r\n      }\r\n      case \"verticalLines\": { \r\n        return this.verticalLines(spread, offset);\r\n      }\r\n      case \"circular\": { \r\n        return this.circular(param1, param2);\r\n      }\r\n      case \"bolt\": { \r\n        return this.bolt();\r\n      } \r\n      case \"rings\": { \r\n        return this.rings(0.02, 1, param1, param2);\r\n      } \r\n      case \"fractal\": { \r\n        return this.rings(0.02, 0, param1, param2);\r\n      } \r\n      case \"solid\": { \r\n        return this.solidColor();\r\n      }\r\n      case \"cube\": { \r\n        return this.cube();\r\n      }\r\n      case \"wires\": { \r\n        return this.wires(spread, false);\r\n      }\r\n      case \"flat\": { \r\n        return this.wires(spread, true);\r\n      }\r\n      case \"racecar\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"trails\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, false);\r\n      }\r\n      case \"slide\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, false);\r\n      }\r\n      case \"noise\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"racecar_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      case \"trails_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, true);\r\n      }\r\n      case \"slide_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, true);\r\n      }\r\n      case \"noise_off\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      default: {\r\n        return this.circular(param1, param2);\r\n      } \r\n   } \r\n  }\r\n\r\n  backgroundChanged = (color: any) => {\r\n    const colorString = color.css?.backgroundColor || color;\r\n    document.getElementById(\"root\").style.backgroundColor = colorString;\r\n    this.setState({bgColor: colorString});\r\n  }\r\n\r\n  toggleUi = () => {\r\n    this.setState({showUi: !this.state.showUi});\r\n    document.getElementById(\"uiContainer\").style.height = this.state.showUi ? \"auto\" : \"0\";\r\n    document.getElementById(\"uiContainer\").style.opacity = this.state.showUi ? \"1\" : \"0\";\r\n\r\n  }\r\n\r\n  visualizerChanged = (e: any) => {\r\n    this.setState({visualizerType: e.target.value});\r\n  }\r\n  \r\n  paletteChanged = (e: any) => {\r\n    this.setState({colorIndex: parseInt(e.target.value)});\r\n  }\r\n\r\n  presetNameChanged = (e: any) => {\r\n    this.setState({presetName: e.target.value});\r\n  }\r\n  \r\n  spreadChanged = (e: any, val: any) => {\r\n    this.setState({spread: val});\r\n  }\r\n\r\n  offsetChanged = (e: any, val: any) => {\r\n    this.setState({offset: val});\r\n  }\r\n\r\n  param1Changed = (e: any, val: any) => {\r\n    this.setState({param1: val});\r\n  }\r\n\r\n  param2Changed = (e: any, val: any) => {\r\n    this.setState({param2: val});\r\n  }\r\n\r\n  onSavePreset = (e: any) => {\r\n    let state: Preset = {\r\n      presetName: this.state.presetName,\r\n      visualizerType: this.state.visualizerType,\r\n      colorIndex: this.state.colorIndex,\r\n      spread: this.state.spread,\r\n      offset: this.state.offset,\r\n      param1: this.state.param1,\r\n      param2: this.state.param2,\r\n      bgColor: this.state.bgColor\r\n    }\r\n    axios.post(this.dbUrl, state).then(()=> {\r\n      this.fetchPresets();\r\n      this.setState({presetName: \"\"});\r\n    }).catch((err) => console.log(err));\r\n  }\r\n\r\n  randomPreset = () => {\r\n    this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n  }\r\n\r\n  onPresetSelected = (e: any) => {\r\n    let selectedPreset = this.state.presets[e.target.value];\r\n    this.setState({ visualizerType: selectedPreset.visualizerType,\r\n      colorIndex: selectedPreset.colorIndex,\r\n      spread: selectedPreset.spread,\r\n      offset: selectedPreset.offset,\r\n      param1: selectedPreset.param1,\r\n      param2: selectedPreset.param2,\r\n      selectedPreset: e.target.value\r\n    });\r\n    this.backgroundChanged(!!selectedPreset.bgColor ? selectedPreset.bgColor : this.state.bgColor);\r\n  }\r\n\r\n  randomCycle = () => {\r\n    if (this.state.shouldCycle){\r\n      this.randomPreset();\r\n    }\r\n  }\r\n\r\n  helpClicked = () => {\r\n    this.setState({showHelp: !this.state.showHelp});\r\n  }\r\n\r\n  render() {\r\n    const visOptions = [\r\n      { value: 'standard', label: 'Standard' },\r\n      { value: 'waveform', label: 'Waveform' },\r\n      { value: 'standardRing', label: 'Circular' },\r\n      { value: 'foldingRing', label: 'Folding' },\r\n      { value: 'horizontalLines', label: 'Horizontal Lines' },\r\n      { value: 'verticalLines', label: 'Vertical Lines' },\r\n      { value: 'circular', label: 'Circles' },\r\n      { value: 'bolt', label: 'Lightning' },\r\n      { value: 'rings', label: 'Rings' },\r\n      { value: 'solid', label: 'Solid' },\r\n      { value: 'cube', label: 'Cube' },\r\n      { value: 'wires', label: \"Wires\"},\r\n      { value: 'flat', label: \"Flat\"},\r\n      { value: 'fractal', label: 'Fractal' },\r\n      { value: 'racecar', label: 'Race' },\r\n      { value: 'trails', label: 'Trails' },\r\n      { value: 'slide', label: 'Slide' },\r\n      { value: 'racecar_off', label: 'Helix' },\r\n      { value: 'trails_off', label: 'Layers' },\r\n      { value: 'slide_off', label: 'Carousel' },\r\n      { value: 'noise', label: 'Noise' },\r\n      { value: 'noise_off', label: 'Static' }\r\n    ];\r\n\r\n    return (\r\n      <>\r\n        <div id=\"uiContainer\">\r\n          <div id=\"selectContainer\">\r\n            <Button onClick={this.helpClicked} variant=\"contained\">\r\n              ?\r\n            </Button>\r\n            <FormControl id=\"colorPicker\">\r\n              <InputLabel className='label MuiFormLabel-root MuiInputLabel-root label MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled' id=\"colorPickerLabel\">\r\n                Background\r\n              </InputLabel>\r\n              <ColorPicker\r\n                defaultValue={this.state.bgColor}\r\n                value={this.state.bgColor}\r\n                onChange={this.backgroundChanged}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Visual\r\n              </InputLabel>\r\n              <Select id=\"visualizerType\"\r\n                  value={this.state.visualizerType}\r\n                  variant=\"outlined\"\r\n                  onChange={this.visualizerChanged}>\r\n                    {visOptions.map((o) => <MenuItem value={o.value}>{o.label}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Palette\r\n              </InputLabel>\r\n              <Select id=\"paletteType\"\r\n                value={this.state.colorIndex}\r\n                variant=\"outlined\"\r\n                onChange={this.paletteChanged}>\r\n                  {ColorPalettes.map((p, index) => <MenuItem value={index}>{p.name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Preset\r\n              </InputLabel>\r\n              <Select id=\"selectedPreset\"\r\n                label=\"Selected Preset\"\r\n                value={this.state.selectedPreset}\r\n                variant=\"outlined\"\r\n                onChange={this.onPresetSelected}>\r\n                  {this.state.presets.map((p: Preset, index: any) => <MenuItem value={index}>{p.presetName}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <Button onClick={this.randomPreset} variant=\"contained\">\r\n              Random\r\n            </Button>\r\n            {this.isLocalHost && \r\n            <>\r\n            <TextField id=\"presetName\"\r\n                value={this.state.presetName}\r\n                placeholder=\"Preset Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.presetNameChanged} \r\n            />\r\n            <Button id=\"savePreset\" onClick={this.onSavePreset} disabled={this.state.presetName === \"\"} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            </>}\r\n          </div>\r\n          <div id=\"sliderContainer\">\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param1}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.param1}\r\n                  step={1}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param1Changed}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param2}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.param2}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={3}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param2Changed}\r\n                />\r\n              </FormControl>  \r\n            </div>\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].spread}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.spread}\r\n                  step={0.5}\r\n                  min={0}\r\n                  max={1000}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.spreadChanged}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].offset}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.offset}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={20}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.offsetChanged}\r\n                />\r\n              </FormControl>   \r\n            </div>\r\n          </div>\r\n          <HelpDialog\r\n            open={this.state.showHelp}\r\n            close={() => this.setState({showHelp: false})}\r\n            setMicAsInput={this.setMicrophoneAsSource}\r\n            setSpeakerAsInput={this.setSpeakerAsSource}   \r\n          />\r\n        </div>\r\n        <Canvas onKeyDown={this.onKeyPressed} className={'App'}>\r\n          <ambientLight intensity={0.5} />\r\n          {this.renderVisualizer(this.state.visualizerType, this.state.spread, this.state.offset, this.state.param1, this.state.param2)}\r\n        </Canvas>\r\n        <div id=\"alert-text\"></div>\r\n      </>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}