{"version":3,"sources":["ColorPalette.ts","MathUtils.ts","HelpDialog.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ColorPalettes","name","palette_6","palette_11","calculateVectorBetweenVectors","x1","x2","y1","y2","angle","Math","atan2","calculateAngleBetweenVectors","angleToVector","sin","cos","useStyles","makeStyles","avatar","backgroundColor","blue","color","shortcuts","key","text","HelpDialog","props","close","open","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContentText","List","map","shortcut","ListItem","ListItemText","primary","StandardBox","geoRef","useRef","lineRef","topVertices","bufferLength","amplitudeArray","Uint8Array","useEffect","analyzer","frequencyBinCount","getByteFrequencyData","useFrame","current","vertices","freqData","nums","freqArray","subarray","freqRange","start","end","freqAvg","length","reduce","a","b","i","y","height","updateHeight","verticesNeedUpdate","ref","scale","width","rotation","rot","attach","WaveformLine","linePoints","push","Vector2","size","getByteTimeDomainData","setFromPoints","points","graphFrequencyData","HorizontalLine","random","waveFunc","pow","exp","abs","x","PI","Date","now","VerticalLine","Plane","freqRanges","material","set","loudestAmp","loudestBand","range","index","averageAmp","getColor","z","args","side","DoubleSide","Cube","Ring","scaleRate","offset","n","stepSize","t","indexStart","ringWidth","ringFuzz","position","radius","ringSize","Bolt","Circle","average","bolt","circleFuzz","Racecar","hasSetMesh","useState","pos","setPos","setShape","geometry","newRotation","newPosition","loop","seperate","newT","speed","lineWidth","Vector3","calculatePosition","offaxis","lookAt","movementVector","Noise","Wire","QuadraticBezierCurve3","getPoints","flat","fuzz","useUpdate","App","dbUrl","isLocalHost","sliderLabels","param1","param2","spread","initializeAudioAnalyser","stream","audioContext","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","smoothingTimeConstant","connect","setState","handleAudio","audioError","err","console","log","alert","backgroundChanged","colorString","css","document","getElementById","style","visualizerChanged","e","visualizerType","target","value","paletteChanged","colorIndex","parseInt","presetNameChanged","presetName","spreadChanged","val","offsetChanged","param1Changed","param2Changed","onSavePreset","state","axios","post","then","fetchPresets","catch","randomPreset","onPresetSelected","floor","presets","selectedPreset","randomCycle","shouldCycle","helpClicked","showHelp","sourceOptions","cycleTime","currentInterval","Boolean","window","location","hostname","match","addEventListener","this","onKeyPressed","bind","confirm","speaker","MediaStream","navigator","mediaDevices","getDisplayMedia","video","audio","addTrack","getAudioTracks","clone","getVideoTracks","stop","removeTrack","error","getUserMedia","removeEventListener","toLowerCase","showAlertText","alertText","setCycleInterval","clearCycleInterval","clearInterval","setInterval","get","resp","data","fetch","headers","response","json","alertDiv","child","firstChild","removeChild","textDiv","createElement","className","innerHTML","appendChild","total","toString","slice","bins","binWidth","boxes","boxWidth","maxX","extraRot","theta","fidelity","lines","standard","waveform","standardRing","horizontalLines","verticalLines","circular","rings","solidColor","cube","wires","Button","onClick","variant","FormControl","InputLabel","defaultValue","onChange","Select","label","o","MenuItem","p","TextField","placeholder","disabled","Slider","step","min","max","valueLabelDisplay","onKeyDown","intensity","renderVisualizer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.697c0f8a.chunk.js","sourcesContent":["interface ColorPalette {\r\n    name: string;\r\n    palette_6: string[];\r\n    palette_11: string[];\r\n}\r\n\r\nexport const ColorPalettes: ColorPalette[] = [\r\n    {\r\n        name: 'Rainbow',\r\n        palette_6: [\"#A800FF\", \"#0079FF\", \"#00F11D\", \"#FFEF00\", \"#FF7F00\", \"#FF0900\"],\r\n        palette_11: [\"#8D5BFF\", \"#6D5BFF\", \"#5B8FFF\", \"#5BFFE7\", \"#5BFF76\", \"#CAFF5B\", \"#FFE05B\", \"#FFA75B\", \"#FF6B5B\", \"#FF5B89\", \"#FF2E37\"]\r\n    },\r\n    {\r\n        name: 'SL2T_1',\r\n        palette_6: [\"#46237A\", \"#FFB400\", \"#CFFFB3\", \"#337CA0\", \"#EE5622\", \"#3A5311\"],\r\n        palette_11: [\"#46237A\", \"#D1B1CB\", \"#DDCAD9\", \"#FFB400\", \"#EE5622\", \"#337CA0\", \"3891A6\", \"#2EC4B6\", \"#9FC490\", \"#CFFFB3\", \"#3A5311\"]\r\n    },\r\n    {\r\n        name: 'Cyberpunk',\r\n        palette_6: [\"#2d00f7\", \"#8900f2\", \"#b100e8\", \"#db00b6\", \"#f20089\", \"#faff00\"],\r\n        palette_11: [\"#2d00f7\", \"#6a00f4\", \"#8900f2\", \"#a100f2\", \"#b100e8\", \"#bc00dd\", \"#db00b6\", \"#e500a4\", \"#f20089\", \"#faff00\", \"#faff09\"]\r\n    },\r\n    {\r\n        name: 'Ocean',\r\n        palette_6: [\"#014f86\", \"#2c7da0\", \"#468faf\", \"#90e0ef\", \"#ade8f4\", \"#caf0f8\"],\r\n        palette_11: [\"#013a63\", \"#01497c\", \"#014f86\", \"#2a6f97\", \"#2c7da0\", \"#2c7da0\", \"#468faf\", \"#61a5c2\", \"#89c2d9\", \"#a9d6e5\", \"#caf0f8\"]\r\n    },\r\n    {\r\n        name: 'Sunset',\r\n        palette_6: [\"#d00000\", \"#dc2f02\", \"#e85d04\", \"#f48c06\", \"#faa307\", \"#ffba08\"],\r\n        palette_11: [\"#6a040f\",\"#d00000\",\"#dc2f02\", \"#dc2f02\", \"#e85d04\", \"#EE5622\", \"#f48c06\", \"#faa307\", \"#ffba12\", \"#ffba08\", \"#faff00\"]\r\n    },\r\n    {\r\n        name: 'Earth',\r\n        palette_6: [\"#606c38\", \"#283618\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"],\r\n        palette_11: [\"#606c38\", \"#ccd5ae\", \"#e9edc9\", \"#d4a373\", \"#edf2f4\", \"#283618\",\"#faedcd\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"]\r\n    },\r\n    {\r\n        name: 'Cherry Blossom',\r\n        palette_6: [\"#D6B95A\", \"#69306D\", \"#A5668B\", \"#4CBFAC\", \"#D00000\", \"#F2D7EE\"],\r\n        palette_11: [\"#D6B95A\", \"#DEFFF2\", \"#4CBFAC\", \"#F2D7EE\", \"#A1275D\", \"#FFFFFF\",\"#A1275D\", \"#F2D7EE\", \"#4CBFAC\", \"#DEFFF2\", \"#D6B95A\"]\r\n    },\r\n]\r\n\r\n// {\r\n//     name: '',\r\n//     palette_6: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\r\n//     palette_11: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\",\"#\", \"#\", \"#\", \"#\", \"#\"]\r\n// },\r\n    ","export const vectorToAngle = (x: number, y: number): number => {\r\n    return Math.atan2(x, y)\r\n}\r\n\r\nexport const calculateAngleBetweenVectors = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    return Math.atan2((x1 - x2), (y1 - y2))\r\n}\r\n\r\nexport const calculateVectorBetweenVectors = (x1: number, x2: number, y1: number, y2: number): [number, number] => {\r\n    const angle = calculateAngleBetweenVectors(x1, x2, y1, y2)\r\n    return angleToVector(angle)\r\n}\r\n\r\nexport const angleToVector = (angle: number): [number, number] => {\r\n    const xVector = Math.sin(angle)\r\n    const yVector = Math.cos(angle)\r\n\r\n    return [xVector, yVector]\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport { Dialog, DialogTitle, List, ListItem, ListItemAvatar, Avatar, ListItemText, DialogContentText } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        backgroundColor: blue[100],\r\n        color: blue[600],\r\n    },\r\n});\r\n\r\n\r\nconst shortcuts = [\r\n    {\r\n        key: \"R\",\r\n        text: \"Random Preset\"\r\n    },\r\n    {\r\n        key: \"C\",\r\n        text: \"Toggle automatic cycling\"\r\n    },\r\n    {\r\n        key: \"Up\",\r\n        text: \"Increase cycle period\"\r\n    },\r\n    {\r\n        key: \"Down\",\r\n        text: \"Decrease cycle period\"\r\n    },\r\n    {\r\n        key: \"G\",\r\n        text: \"Green Screen Background\"\r\n    },\r\n    {\r\n        key: \"B\",\r\n        text: \"Blue Screen Background\"\r\n    },\r\n    {\r\n        key: \"H\",\r\n        text: \"Random Background\"\r\n    },\r\n];  \r\n\r\nexport default function HelpDialog(props: any) {\r\nconst classes = useStyles();\r\nconst { close, open } = props;\r\n\r\n\r\nreturn (\r\n        <Dialog onClose={close} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\">Welcome to the Talkulizer!</DialogTitle>\r\n            <DialogContentText id=\"simple-dialog-title\">I made this audio visualizer to be fully customizable, there's over 20 different visualiztion types, with multiple parameters to change each one. I've provided over 75 presets from my testing that look cool, but play around and find what you think looks cool! Here are some handy commands that I've made to help make using the visualizer easier.\r\n            </DialogContentText>\r\n            <List>\r\n                {shortcuts.map((shortcut) => (\r\n                <ListItem key={shortcut.key}>\r\n                    <ListItemText primary={shortcut.key} />\r\n                    <ListItemText primary={shortcut.text} />\r\n                </ListItem>\r\n                ))}\r\n            </List>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nHelpDialog.propTypes = {\r\n    close: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired\r\n};","import ReactDOM from 'react-dom';\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useResource, useThree, useUpdate } from 'react-three-fiber';\r\nimport { BufferGeometry, CircleBufferGeometry, CircleGeometry, Color, EdgesGeometry, Geometry, LineBasicMaterial, Mesh, Points, Scene, Vector2, DoubleSide, CubicBezierCurve3, Vector3, QuadraticBezierCurve3} from 'three';\r\nimport './App.css';\r\nimport { Input, MenuItem, Select, TextField, Slider, Button, InputLabel, FormControl, Dialog } from '@material-ui/core';\r\nimport { ColorPalettes } from './ColorPalette';\r\nimport axios from 'axios';\r\nimport { calculateVectorBetweenVectors, vectorToAngle } from './MathUtils';\r\nimport { Dictionary } from 'ts-json-db/dist/src';\r\nimport { ColorPicker } from 'material-ui-color';\r\nimport HelpDialog from './HelpDialog';\r\n\r\ninterface FrequencyRange {\r\n  start: number;\r\n  end: number;\r\n  color?: string;\r\n}\r\n\r\ninterface SliderOptions{\r\n  param1: string;\r\n  param2: string;\r\n  offset: string;\r\n  spread: string;\r\n}\r\n\r\ninterface Preset {\r\n  presetName: string;\r\n  visualizerType: string,\r\n  colorIndex: number,\r\n  spread: number,\r\n  offset: number,\r\n  param1: number,\r\n  param2: number\r\n}\r\n\r\nfunction StandardBox(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const topVertices = [true,true,false,false, true, true, false, false];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function updateHeight(vertices: Vector3[], freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i=0; i < vertices.length; i++){\r\n      vertices[i].y = !topVertices[i] ? 0 : props.height*freqAvg/(255.0);\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      updateHeight(geoRef.current.vertices, amplitudeArray);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        ref={lineRef}\r\n        {...props}\r\n        scale={[1.0*props.width, 1, 0]}\r\n        rotation={[0,0, !!props.rot ? props.rot : 0]}\r\n      >\r\n        <boxGeometry ref={geoRef} attach=\"geometry\" />\r\n        <meshBasicMaterial color={props.color} />\r\n      </mesh>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nfunction WaveformLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 2048;\r\n  const size = 12.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size/2 + (-2*size*i/lineSegments), 0));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array) {\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (freqData[i]-128.0)* props.height / 128.0;\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction HorizontalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction VerticalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].x = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].y)*0.65)*Math.cos(2*Math.PI*points[i].y + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction Plane(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <planeBufferGeometry ref={geoRef} args={[3,3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Cube(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <boxBufferGeometry ref={geoRef} args={[3,3, 3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Ring(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function ringFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0));\r\n    const n = props.n > 2 ? props.n : 2;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = !props.indexStart ? i*stepSize : i+1.0*stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(n*t))*Math.cos(t + Date.now() * 0.001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(n*t))*Math.sin(t + Date.now() * 0.001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n     if (lineRef && lineRef.current && geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.vertices = ringFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n      if (lineRef.current.scale.x > 10) {\r\n        lineRef.current.scale.set(0.01, 0.01, 1);\r\n        lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.radius, props.radius, 1]}>\r\n      <ringGeometry ref={geoRef} args={[1-(props.ringSize/2.0), 1+(props.ringSize/2.0), 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Bolt(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[ 1, 1, 1]}>\r\n      <circleBufferGeometry ref={geoRef} args={[1, 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Circle(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n\r\n  useEffect(()=> {\r\n    for (let i = 0; i < lineSegments; i++) {\r\n      linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n    }\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function circleFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0))*0.1;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = i+1 * stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(props.n*t))*Math.cos(t + Date.now() * 0.0001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(props.n*t))*Math.sin(t + Date.now() * 0.0001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      if (props.bolt) {\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n      }\r\n      else {\r\n        lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.vertices = circleFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n        geoRef.current.verticesNeedUpdate = true;\r\n        if (lineRef.current.scale.x > 10) {\r\n          lineRef.current.scale.set(0.01, 0.01, 1);\r\n          lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.bolt ? 1 : props.radius, props.bolt ? 1 : props.radius, 1]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Racecar(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].x = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else{\r\n        const movementVector = calculateVectorBetweenVectors(lineRef.current.position.x, newPosition.x, newPosition.y, lineRef.current.position.y);\r\n        const angle = vectorToAngle(movementVector[0], movementVector[1]);\r\n        lineRef.current.rotation.z = angle+(Math.PI/2);\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Noise(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].z = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else {\r\n        lineRef.current.lookAt(new Vector3(newPosition.x, newPosition.y, 1));\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Wire(props: any) {\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const curve = new QuadraticBezierCurve3(\r\n    new Vector3( 0, 1, 0 ),\r\n    new Vector3( 0, 0.25, 0.2 ),\r\n    new Vector3( 0, 0, 1 )\r\n  );\r\n\r\n  const points = curve.getPoints(1024);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.flat) {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].y = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z);\r\n      }\r\n    }\r\n    else if (props.fuzz){\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = Math.random()*(freqAvg/(255.0));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z); \r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(points, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n\r\n  const geoRef = useUpdate((geometry: BufferGeometry) => {\r\n    geometry.setFromPoints(points)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, 30*Math.PI/180, 0]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default class App extends React.Component<any, any> {\r\n  private dbUrl: string;\r\n  private isLocalHost: Boolean;\r\n  private sliderLabels: Record<string, SliderOptions> = {\r\n    'standard': {\r\n      param1: 'Bars',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'waveform': {\r\n      param1: 'Lines',\r\n      param2: 'z',\r\n      offset: 'Height',\r\n      spread: '',\r\n    },\r\n    'standardRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'foldingRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'horizontalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'verticalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'circular': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'bolt': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'rings': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'fractal': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'solid': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'cube': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'wires': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'flat': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'racecar': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'racecar_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    }\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      analyzer: null, \r\n      visualizerType: \"standard\",\r\n      spread: 1,\r\n      offset: 1.3,\r\n      param1: 2,\r\n      param2: 0.2,\r\n      colorIndex: 0,\r\n      presetName: \"\",\r\n      selectedPreset: 0,\r\n      presets: [],\r\n      sourceOptions: [],\r\n      shouldCycle: false,\r\n      cycleTime: 2000,\r\n      currentInterval: null,\r\n      color: \"#040d1b\",\r\n      showHelp: true\r\n    };\r\n    this.dbUrl = \"http://localhost:3001/presets\";\r\n    this.isLocalHost  = Boolean(\r\n      window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(\r\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n    );\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n    if (window.confirm(\"Welcome to the @SethLovesToTalk Audio Visualizer! Before we can start, you'll need to decide whether you want to use your microphone or your speakers as your audio input. \\n\\n Press 'Okay' to use your speakers, and 'Cancel' for your microphone. \\n\\n (NOTE: If using your speakers, a menu will pop up asking you to select your source. If on Windows, select any screen, and make sure the 'Share Audio' button in the bottom left is selected. On Mac, this option is only present from selecting a chrome tab, so any audio you want to visualize will need to come from that tab.\")) {\r\n      let speaker = new MediaStream;\r\n      const mediaDevices = navigator.mediaDevices as any;\r\n      mediaDevices.getDisplayMedia({\r\n          video: true ,\r\n          audio: true\r\n      }).then((stream: MediaStream) => {\r\n          this.fetchPresets().then(this.randomPreset);\r\n          speaker.addTrack(stream.getAudioTracks()[0].clone());\r\n          // stopping and removing the video track to enhance the performance\r\n          stream.getVideoTracks()[0].stop();\r\n          stream.removeTrack(stream.getVideoTracks()[0]);\r\n          this.handleAudio(speaker);\r\n      }).catch(() => {\r\n          console.error('failed')\r\n      });\r\n    } else {\r\n      navigator.mediaDevices.getUserMedia({audio: true })\r\n      .then(this.handleAudio)\r\n      .catch(this.audioError);\r\n      this.fetchPresets().then(this.randomPreset);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n  }\r\n\r\n  onKeyPressed(e: any) {\r\n    switch(e.key.toLowerCase()){\r\n      case \"r\":\r\n        this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n        this.showAlertText(\"Random Preset\");\r\n        break;\r\n      case \"c\":\r\n        this.setState({shouldCycle: !this.state.shouldCycle});\r\n        let alertText = this.state.shouldCycle ? `Cycle (${this.state.cycleTime / 1000}s)` : \"Cycle (Off)\";\r\n        if (this.state.shouldCycle) {\r\n          this.setCycleInterval(this.state.cycleTime);\r\n        }\r\n        else {\r\n          this.clearCycleInterval();\r\n        }\r\n        this.showAlertText(alertText);\r\n        break;\r\n      case \"g\":\r\n        this.backgroundChanged(\"#00ff00\");\r\n        this.showAlertText(\"Green Background\");\r\n        break;\r\n      case \"b\":\r\n        this.backgroundChanged(\"#0000ff\");\r\n        this.showAlertText(\"Blue Background\");\r\n        break;\r\n      case \"h\":\r\n        this.backgroundChanged(this.getColor(null, null));\r\n        this.showAlertText(\"Random Background\");\r\n        break;\r\n      case \"arrowup\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime < 1000){\r\n          this.setState({cycleTime: 1000});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime + 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime + 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      case \"arrowdown\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime <= 1000){\r\n          this.setState({cycleTime: 500});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime - 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime - 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  clearCycleInterval(){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n  }\r\n\r\n  setCycleInterval(cycleTime: number){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n    this.setState({currentInterval: setInterval(this.randomPreset, cycleTime)});\r\n  }\r\n\r\n  fetchPresets(){\r\n    if (!this.isLocalHost){\r\n      return fetch('presetDb.json', {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      }\r\n      )\r\n        .then(function(response){\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({presets: json.presets});\r\n        });\r\n    }\r\n    else {\r\n      return axios.get(this.dbUrl).then((resp) => {\r\n        this.setState({presets: resp.data})\r\n      });\r\n    }\r\n  }\r\n\r\n  showAlertText(text: string){\r\n    let alertDiv = document.getElementById(\"alert-text\");\r\n    let child = alertDiv.firstChild;\r\n    if (!!child){\r\n      alertDiv.removeChild(child)\r\n    }\r\n    let textDiv = document.createElement(\"div\");\r\n    textDiv.className = \"fade\";\r\n    textDiv.innerHTML = text;\r\n    alertDiv.appendChild(textDiv);\r\n  }\r\n\r\n  initializeAudioAnalyser = (stream: MediaStream) => {\r\n    const audioContext = new AudioContext();\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    analyser.smoothingTimeConstant = 0.5;\r\n    source.connect(analyser);\r\n    this.setState({\r\n      analyzer: analyser\r\n    })\r\n  }\r\n\r\n  handleAudio = (stream: MediaStream) => {\r\n    this.initializeAudioAnalyser(stream);\r\n  }\r\n\r\n  audioError = (err: any) => {\r\n    console.log(err);\r\n    alert(\"Something went wrong: \" + err.name);\r\n  }\r\n\r\n  getColor(index: number, total: number){\r\n    return \"#\" + Math.random().toString(16).slice(2, 8);\r\n  }\r\n\r\n  standard(height: number, spread: number, bins: number, width: number) {\r\n    const maxX = 18;\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let boxWidth = ((maxX*2.0)/bins) - spread;\r\n      let x = - (maxX+(maxX/bins)) + (2*maxX/bins)*(i+1);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={boxWidth} height={height} position={[x,0.5,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} />)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>\r\n      \r\n    )\r\n  }\r\n\r\n  standardRing(height: number, spread: number, bins: number, radius: number, extraRot: number) {\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let theta = i*Math.PI*2/bins;\r\n      let x = radius*Math.cos(theta);\r\n      let y = radius*Math.sin(theta);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={spread} height={height} position={[x,y,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} rot={Math.PI + theta + (Math.PI/2)*extraRot}/>)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  waveform(fidelity: number, height: number, bins: number, z: number) {\r\n    let lines = [];\r\n    const yMax = 2;\r\n    height = height > 0 ? height*2 : 0.1;\r\n    for (let i=0; i<bins; i++){\r\n      let y = - (yMax+(yMax/bins)) + (2*yMax/bins)*(i+1);\r\n      lines.push(<WaveformLine analyzer={this.state.analyzer} position={[0,y,-z]} color={this.getColor(i, bins)} height={height} />);\r\n    };\r\n    return (\r\n      <>\r\n        {lines}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  horizontalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[0, (spread*-2) - offset, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[0, (spread*-1) - offset, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[0, 0 - offset, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[0, (spread*1) - offset, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[0, (spread*2) - offset, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[0, (spread*3) - offset, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  solidColor() {\r\n    return (\r\n      <>\r\n        <Plane analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  cube() {\r\n    return (\r\n      <>\r\n        <Cube analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  bolt() {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  circular(n: number, ringWidth: number) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  Racecar(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  Noise(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rings(ringSize: number, indexStart: number, n: number, ringWidth: number) {\r\n    const numRings = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numRings;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  verticalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[(spread*-2) - offset, 0, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[(spread*-1) - offset, 0, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[ 0 - offset, 0, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[(spread*1) - offset, 0, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[(spread*2) - offset, 0, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[(spread*3) - offset, 0, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  wires(spread: number, flat: boolean) {\r\n    return (\r\n      <>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[0]} freqRange={{start: 0, end:  2}} position = {[0,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[1]} freqRange={{start: 4, end:  10}} position = {[0 + spread,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[2]} freqRange={{start: 12, end:  16}} position = {[0 + spread*2,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[3]} freqRange={{start: 18, end:  22}} position = {[0 + spread*3,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[4]} freqRange={{start: 40, end:  60}} position = {[0 + spread*4,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[5]} freqRange={{start: 62, end:  80}} position = {[0 + spread*5,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[6]} freqRange={{start: 82, end:  100}} position = {[0 + spread*6,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[7]} freqRange={{start: 100, end:  140}} position = {[0 + spread*7,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[8]} freqRange={{start: 146, end:  190}} position = {[0 + spread*8,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[9]} freqRange={{start: 264, end:  542}} position = {[0 + spread*9,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[10]} freqRange={{start: 550, end:  852}} position = {[0 + spread*10,0,0]}  flat={flat}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderVisualizer(visualizerType: string, spread: number, offset: number, param1: number, param2: number){\r\n    switch(visualizerType) { \r\n      case \"standard\": { \r\n        return this.standard(spread, offset, param1, param2);\r\n      }\r\n      case \"waveform\": { \r\n        return this.waveform(spread, offset, param1, param2);\r\n      }\r\n      case \"standardRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 1);\r\n      }\r\n      case \"foldingRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 0);\r\n      }\r\n      case \"horizontalLines\": { \r\n        return this.horizontalLines(spread, offset);\r\n      }\r\n      case \"verticalLines\": { \r\n        return this.verticalLines(spread, offset);\r\n      }\r\n      case \"circular\": { \r\n        return this.circular(param1, param2);\r\n      }\r\n      case \"bolt\": { \r\n        return this.bolt();\r\n      } \r\n      case \"rings\": { \r\n        return this.rings(0.02, 1, param1, param2);\r\n      } \r\n      case \"fractal\": { \r\n        return this.rings(0.02, 0, param1, param2);\r\n      } \r\n      case \"solid\": { \r\n        return this.solidColor();\r\n      }\r\n      case \"cube\": { \r\n        return this.cube();\r\n      }\r\n      case \"wires\": { \r\n        return this.wires(spread, false);\r\n      }\r\n      case \"flat\": { \r\n        return this.wires(spread, true);\r\n      }\r\n      case \"racecar\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"trails\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, false);\r\n      }\r\n      case \"slide\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, false);\r\n      }\r\n      case \"noise\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"racecar_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      case \"trails_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, true);\r\n      }\r\n      case \"slide_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, true);\r\n      }\r\n      case \"noise_off\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      default: {\r\n        return this.circular(param1, param2);\r\n      } \r\n   } \r\n  }\r\n\r\n  backgroundChanged = (color: any) => {\r\n    const colorString = color.css?.backgroundColor || color;\r\n    document.getElementById(\"root\").style.backgroundColor = colorString;\r\n    this.setState({color: colorString});\r\n  }\r\n\r\n  visualizerChanged = (e: any) => {\r\n    this.setState({visualizerType: e.target.value});\r\n  }\r\n  \r\n  paletteChanged = (e: any) => {\r\n    this.setState({colorIndex: parseInt(e.target.value)});\r\n  }\r\n\r\n  presetNameChanged = (e: any) => {\r\n    this.setState({presetName: e.target.value});\r\n  }\r\n  \r\n  spreadChanged = (e: any, val: any) => {\r\n    this.setState({spread: val});\r\n  }\r\n\r\n  offsetChanged = (e: any, val: any) => {\r\n    this.setState({offset: val});\r\n  }\r\n\r\n  param1Changed = (e: any, val: any) => {\r\n    this.setState({param1: val});\r\n  }\r\n\r\n  param2Changed = (e: any, val: any) => {\r\n    this.setState({param2: val});\r\n  }\r\n\r\n  onSavePreset = (e: any) => {\r\n    let state: Preset = {\r\n      presetName: this.state.presetName,\r\n      visualizerType: this.state.visualizerType,\r\n      colorIndex: this.state.colorIndex,\r\n      spread: this.state.spread,\r\n      offset: this.state.offset,\r\n      param1: this.state.param1,\r\n      param2: this.state.param2\r\n    }\r\n    axios.post(this.dbUrl, state).then(()=> {\r\n      this.fetchPresets();\r\n      this.setState({presetName: \"\"});\r\n    }).catch((err) => console.log(err));\r\n  }\r\n\r\n  randomPreset = () => {\r\n    this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n  }\r\n\r\n  onPresetSelected = (e: any) => {\r\n    let selectedPreset = this.state.presets[e.target.value];\r\n    this.setState({ visualizerType: selectedPreset.visualizerType,\r\n      colorIndex: selectedPreset.colorIndex,\r\n      spread: selectedPreset.spread,\r\n      offset: selectedPreset.offset,\r\n      param1: selectedPreset.param1,\r\n      param2: selectedPreset.param2,\r\n      selectedPreset: e.target.value\r\n    });\r\n  }\r\n\r\n  randomCycle = () => {\r\n    if (this.state.shouldCycle){\r\n      this.randomPreset();\r\n    }\r\n  }\r\n\r\n  helpClicked = () => {\r\n    this.setState({showHelp: !this.state.showHelp});\r\n  }\r\n\r\n  render() {\r\n    const visOptions = [\r\n      { value: 'standard', label: 'Standard' },\r\n      { value: 'waveform', label: 'Waveform' },\r\n      { value: 'standardRing', label: 'Circular' },\r\n      { value: 'foldingRing', label: 'Folding' },\r\n      { value: 'horizontalLines', label: 'Horizontal Lines' },\r\n      { value: 'verticalLines', label: 'Vertical Lines' },\r\n      { value: 'circular', label: 'Circles' },\r\n      { value: 'bolt', label: 'Lightning' },\r\n      { value: 'rings', label: 'Rings' },\r\n      { value: 'solid', label: 'Solid' },\r\n      { value: 'cube', label: 'Cube' },\r\n      { value: 'wires', label: \"Wires\"},\r\n      { value: 'flat', label: \"Flat\"},\r\n      { value: 'fractal', label: 'Fractal' },\r\n      { value: 'racecar', label: 'Race' },\r\n      { value: 'trails', label: 'Trails' },\r\n      { value: 'slide', label: 'Slide' },\r\n      { value: 'racecar_off', label: 'Helix' },\r\n      { value: 'trails_off', label: 'Layers' },\r\n      { value: 'slide_off', label: 'Carousel' },\r\n      { value: 'noise', label: 'Noise' },\r\n      { value: 'noise_off', label: 'Static' }\r\n    ];\r\n\r\n    return (\r\n      <>\r\n        <div id=\"uiContainer\">\r\n          <div id=\"selectContainer\">\r\n            <Button onClick={this.helpClicked} variant=\"contained\">\r\n              ?\r\n            </Button>\r\n            <FormControl id=\"colorPicker\">\r\n              <InputLabel className='label MuiFormLabel-root MuiInputLabel-root label MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled' id=\"colorPickerLabel\">\r\n                Background\r\n              </InputLabel>\r\n              <ColorPicker\r\n                defaultValue={this.state.color}\r\n                value={this.state.color}\r\n                onChange={this.backgroundChanged}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Visual\r\n              </InputLabel>\r\n              <Select id=\"visualizerType\"\r\n                  value={this.state.visualizerType}\r\n                  variant=\"outlined\"\r\n                  onChange={this.visualizerChanged}>\r\n                    {visOptions.map((o) => <MenuItem value={o.value}>{o.label}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Palette\r\n              </InputLabel>\r\n              <Select id=\"paletteType\"\r\n                value={this.state.colorIndex}\r\n                variant=\"outlined\"\r\n                onChange={this.paletteChanged}>\r\n                  {ColorPalettes.map((p, index) => <MenuItem value={index}>{p.name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Preset\r\n              </InputLabel>\r\n              <Select id=\"selectedPreset\"\r\n                label=\"Selected Preset\"\r\n                value={this.state.selectedPreset}\r\n                variant=\"outlined\"\r\n                onChange={this.onPresetSelected}>\r\n                  {this.state.presets.map((p: Preset, index: any) => <MenuItem value={index}>{p.presetName}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <Button onClick={this.randomPreset} variant=\"contained\">\r\n              Random\r\n            </Button>\r\n            {this.isLocalHost && \r\n            <>\r\n            <TextField id=\"presetName\"\r\n                value={this.state.presetName}\r\n                placeholder=\"Preset Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.presetNameChanged} \r\n            />\r\n            <Button id=\"savePreset\" onClick={this.onSavePreset} disabled={this.state.presetName === \"\"} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            </>}\r\n          </div>\r\n          <div id=\"sliderContainer\">\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param1}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.param1}\r\n                  step={1}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param1Changed}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param2}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.param2}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={3}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param2Changed}\r\n                />\r\n              </FormControl>  \r\n            </div>\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].spread}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.spread}\r\n                  step={0.5}\r\n                  min={0}\r\n                  max={1000}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.spreadChanged}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].offset}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.offset}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={20}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.offsetChanged}\r\n                />\r\n              </FormControl>   \r\n            </div>\r\n          </div>\r\n          <div id=\"alert-text\"></div>\r\n          <HelpDialog\r\n            open={this.state.showHelp}\r\n            close={() => this.setState({showHelp: false})}  />\r\n        </div>\r\n        <Canvas onKeyDown={this.onKeyPressed} className={'App'}>\r\n          <ambientLight intensity={0.5} />\r\n          {this.renderVisualizer(this.state.visualizerType, this.state.spread, this.state.offset, this.state.param1, this.state.param2)}\r\n        </Canvas>\r\n      </>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}