{"version":3,"sources":["ColorPalette.ts","MathUtils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["ColorPalettes","name","palette_6","palette_11","calculateVectorBetweenVectors","x1","x2","y1","y2","angle","Math","atan2","calculateAngleBetweenVectors","angleToVector","sin","cos","StandardBox","props","geoRef","useRef","lineRef","topVertices","bufferLength","amplitudeArray","Uint8Array","useEffect","analyzer","frequencyBinCount","getByteFrequencyData","useFrame","current","vertices","freqData","nums","freqArray","subarray","freqRange","start","end","freqAvg","length","reduce","a","b","i","y","height","updateHeight","verticesNeedUpdate","ref","scale","width","rotation","rot","attach","color","WaveformLine","linePoints","push","Vector2","size","getByteTimeDomainData","setFromPoints","points","graphFrequencyData","HorizontalLine","random","waveFunc","pow","exp","abs","x","PI","Date","now","VerticalLine","Plane","freqRanges","material","set","loudestAmp","loudestBand","map","range","index","averageAmp","getColor","z","args","side","DoubleSide","Cube","Ring","scaleRate","offset","n","stepSize","t","indexStart","ringWidth","ringFuzz","position","radius","ringSize","Bolt","Circle","average","bolt","circleFuzz","Racecar","hasSetMesh","useState","pos","setPos","setShape","geometry","newRotation","newPosition","loop","seperate","newT","speed","lineWidth","Vector3","calculatePosition","offaxis","lookAt","movementVector","Noise","Wire","QuadraticBezierCurve3","getPoints","flat","fuzz","useUpdate","App","dbUrl","isLocalHost","sliderLabels","param1","param2","spread","initializeAudioAnalyser","stream","audioContext","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","smoothingTimeConstant","connect","setState","handleAudio","audioError","err","console","log","alert","visualizerChanged","e","visualizerType","target","value","paletteChanged","colorIndex","parseInt","presetNameChanged","presetName","spreadChanged","val","offsetChanged","param1Changed","param2Changed","onSavePreset","state","axios","post","then","fetchPresets","catch","randomPreset","onPresetSelected","floor","presets","selectedPreset","sourceOptions","Boolean","window","location","hostname","match","confirm","speaker","MediaStream","navigator","mediaDevices","getDisplayMedia","video","audio","addTrack","getAudioTracks","clone","getVideoTracks","stop","removeTrack","error","getUserMedia","this","get","resp","data","fetch","headers","response","json","total","toString","slice","bins","binWidth","boxes","boxWidth","maxX","extraRot","theta","fidelity","lines","standard","waveform","standardRing","horizontalLines","verticalLines","circular","rings","solidColor","cube","wires","id","Button","onClick","variant","FormControl","InputLabel","className","Select","onChange","label","o","MenuItem","p","TextField","placeholder","disabled","Slider","defaultValue","step","min","max","valueLabelDisplay","intensity","penumbra","renderVisualizer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d74c6a9.chunk.js","sourcesContent":["interface ColorPalette {\r\n    name: string;\r\n    palette_6: string[];\r\n    palette_11: string[];\r\n}\r\n\r\nexport const ColorPalettes: ColorPalette[] = [\r\n    {\r\n        name: 'Rainbow',\r\n        palette_6: [\"#A800FF\", \"#0079FF\", \"#00F11D\", \"#FFEF00\", \"#FF7F00\", \"#FF0900\"],\r\n        palette_11: [\"#8D5BFF\", \"#6D5BFF\", \"#5B8FFF\", \"#5BFFE7\", \"#5BFF76\", \"#CAFF5B\", \"#FFE05B\", \"#FFA75B\", \"#FF6B5B\", \"#FF5B89\", \"#FF2E37\"]\r\n    },\r\n    {\r\n        name: 'SL2T_1',\r\n        palette_6: [\"#46237A\", \"#FFB400\", \"#CFFFB3\", \"#337CA0\", \"#EE5622\", \"#3A5311\"],\r\n        palette_11: [\"#46237A\", \"#D1B1CB\", \"#DDCAD9\", \"#FFB400\", \"#EE5622\", \"#337CA0\", \"3891A6\", \"#2EC4B6\", \"#9FC490\", \"#CFFFB3\", \"#3A5311\"]\r\n    },\r\n    {\r\n        name: 'Cyberpunk',\r\n        palette_6: [\"#2d00f7\", \"#8900f2\", \"#b100e8\", \"#db00b6\", \"#f20089\", \"#faff00\"],\r\n        palette_11: [\"#2d00f7\", \"#6a00f4\", \"#8900f2\", \"#a100f2\", \"#b100e8\", \"#bc00dd\", \"#db00b6\", \"#e500a4\", \"#f20089\", \"#faff00\", \"#faff09\"]\r\n    },\r\n    {\r\n        name: 'Ocean',\r\n        palette_6: [\"#014f86\", \"#2c7da0\", \"#468faf\", \"#90e0ef\", \"#ade8f4\", \"#caf0f8\"],\r\n        palette_11: [\"#013a63\", \"#01497c\", \"#014f86\", \"#2a6f97\", \"#2c7da0\", \"#2c7da0\", \"#468faf\", \"#61a5c2\", \"#89c2d9\", \"#a9d6e5\", \"#caf0f8\"]\r\n    },\r\n    {\r\n        name: 'Sunset',\r\n        palette_6: [\"#d00000\", \"#dc2f02\", \"#e85d04\", \"#f48c06\", \"#faa307\", \"#ffba08\"],\r\n        palette_11: [\"#6a040f\",\"#d00000\",\"#dc2f02\", \"#dc2f02\", \"#e85d04\", \"#EE5622\", \"#f48c06\", \"#faa307\", \"#ffba12\", \"#ffba08\", \"#faff00\"]\r\n    },\r\n    {\r\n        name: 'Earth',\r\n        palette_6: [\"#606c38\", \"#283618\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"],\r\n        palette_11: [\"#606c38\", \"#ccd5ae\", \"#e9edc9\", \"#d4a373\", \"#edf2f4\", \"#283618\",\"#faedcd\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"]\r\n    },\r\n    {\r\n        name: 'Cherry Blossom',\r\n        palette_6: [\"#D6B95A\", \"#69306D\", \"#A5668B\", \"#4CBFAC\", \"#D00000\", \"#F2D7EE\"],\r\n        palette_11: [\"#D6B95A\", \"#DEFFF2\", \"#4CBFAC\", \"#F2D7EE\", \"#A1275D\", \"#FFFFFF\",\"#A1275D\", \"#F2D7EE\", \"#4CBFAC\", \"#DEFFF2\", \"#D6B95A\"]\r\n    },\r\n]\r\n\r\n// {\r\n//     name: '',\r\n//     palette_6: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\r\n//     palette_11: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\",\"#\", \"#\", \"#\", \"#\", \"#\"]\r\n// },\r\n    ","export const vectorToAngle = (x: number, y: number): number => {\r\n    return Math.atan2(x, y)\r\n}\r\n\r\nexport const calculateAngleBetweenVectors = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    return Math.atan2((x1 - x2), (y1 - y2))\r\n}\r\n\r\nexport const calculateVectorBetweenVectors = (x1: number, x2: number, y1: number, y2: number): [number, number] => {\r\n    const angle = calculateAngleBetweenVectors(x1, x2, y1, y2)\r\n    return angleToVector(angle)\r\n}\r\n\r\nexport const angleToVector = (angle: number): [number, number] => {\r\n    const xVector = Math.sin(angle)\r\n    const yVector = Math.cos(angle)\r\n\r\n    return [xVector, yVector]\r\n}","import ReactDOM from 'react-dom';\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useResource, useThree, useUpdate } from 'react-three-fiber';\r\nimport { BufferGeometry, CircleBufferGeometry, CircleGeometry, Color, EdgesGeometry, Geometry, LineBasicMaterial, Mesh, Points, Scene, Vector2, DoubleSide, CubicBezierCurve3, Vector3, QuadraticBezierCurve3} from 'three';\r\nimport './App.css';\r\nimport { Input, MenuItem, Select, TextField, Slider, Button, InputLabel, FormControl } from '@material-ui/core';\r\nimport { ColorPalettes } from './ColorPalette';\r\nimport axios from 'axios';\r\nimport { calculateVectorBetweenVectors, vectorToAngle } from './MathUtils';\r\nimport { Dictionary } from 'ts-json-db/dist/src';\r\n\r\ninterface FrequencyRange {\r\n  start: number;\r\n  end: number;\r\n  color?: string;\r\n}\r\n\r\ninterface SliderOptions{\r\n  param1: string;\r\n  param2: string;\r\n  offset: string;\r\n  spread: string;\r\n}\r\n\r\ninterface Preset {\r\n  presetName: string;\r\n  visualizerType: string,\r\n  colorIndex: number,\r\n  spread: number,\r\n  offset: number,\r\n  param1: number,\r\n  param2: number\r\n}\r\n\r\nfunction StandardBox(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const topVertices = [true,true,false,false, true, true, false, false];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function updateHeight(vertices: Vector3[], freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i=0; i < vertices.length; i++){\r\n      vertices[i].y = !topVertices[i] ? 0 : props.height*freqAvg/(255.0);\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      updateHeight(geoRef.current.vertices, amplitudeArray);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        ref={lineRef}\r\n        {...props}\r\n        scale={[1.0*props.width, 1, 0]}\r\n        rotation={[0,0, !!props.rot ? props.rot : 0]}\r\n      >\r\n        <boxGeometry ref={geoRef} attach=\"geometry\" />\r\n        <meshBasicMaterial color={props.color} />\r\n      </mesh>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nfunction WaveformLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 2048;\r\n  const size = 12.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size/2 + (-2*size*i/lineSegments), 0));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array) {\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (freqData[i]-128.0)* props.height / 128.0;\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction HorizontalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction VerticalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].x = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].y)*0.65)*Math.cos(2*Math.PI*points[i].y + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction Plane(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <planeBufferGeometry ref={geoRef} args={[3,3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Cube(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <boxBufferGeometry ref={geoRef} args={[3,3, 3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Ring(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function ringFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0));\r\n    const n = props.n > 2 ? props.n : 2;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = !props.indexStart ? i*stepSize : i+1.0*stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(n*t))*Math.cos(t + Date.now() * 0.001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(n*t))*Math.sin(t + Date.now() * 0.001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n     if (lineRef && lineRef.current && geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.vertices = ringFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n      if (lineRef.current.scale.x > 10) {\r\n        lineRef.current.scale.set(0.01, 0.01, 1);\r\n        lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.radius, props.radius, 1]}>\r\n      <ringGeometry ref={geoRef} args={[1-(props.ringSize/2.0), 1+(props.ringSize/2.0), 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Bolt(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[ 1, 1, 1]}>\r\n      <circleBufferGeometry ref={geoRef} args={[1, 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Circle(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n\r\n  useEffect(()=> {\r\n    for (let i = 0; i < lineSegments; i++) {\r\n      linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n    }\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function circleFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0))*0.1;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = i+1 * stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(props.n*t))*Math.cos(t + Date.now() * 0.0001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(props.n*t))*Math.sin(t + Date.now() * 0.0001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      if (props.bolt) {\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n      }\r\n      else {\r\n        lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.vertices = circleFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n        geoRef.current.verticesNeedUpdate = true;\r\n        if (lineRef.current.scale.x > 10) {\r\n          lineRef.current.scale.set(0.01, 0.01, 1);\r\n          lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.bolt ? 1 : props.radius, props.bolt ? 1 : props.radius, 1]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Racecar(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].x = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else{\r\n        const movementVector = calculateVectorBetweenVectors(lineRef.current.position.x, newPosition.x, newPosition.y, lineRef.current.position.y);\r\n        const angle = vectorToAngle(movementVector[0], movementVector[1]);\r\n        lineRef.current.rotation.z = angle+(Math.PI/2);\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Noise(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].z = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else {\r\n        lineRef.current.lookAt(new Vector3(newPosition.x, newPosition.y, 1));\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Wire(props: any) {\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const curve = new QuadraticBezierCurve3(\r\n    new Vector3( 0, 1, 0 ),\r\n    new Vector3( 0, 0.25, 0.2 ),\r\n    new Vector3( 0, 0, 1 )\r\n  );\r\n\r\n  const points = curve.getPoints(1024);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.flat) {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].y = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z);\r\n      }\r\n    }\r\n    else if (props.fuzz){\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = Math.random()*(freqAvg/(255.0));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z); \r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(points, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n\r\n  const geoRef = useUpdate((geometry: BufferGeometry) => {\r\n    geometry.setFromPoints(points)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, 30*Math.PI/180, 0]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default class App extends React.Component<any, any> {\r\n  private dbUrl: string;\r\n  private isLocalHost: Boolean;\r\n  private sliderLabels: Record<string, SliderOptions> = {\r\n    'standard': {\r\n      param1: 'Bars',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'waveform': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'standardRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'foldingRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'horizontalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'verticalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'circular': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'bolt': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'rings': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'fractal': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'solid': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'cube': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'wires': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'flat': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'racecar': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'racecar_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    }\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      analyzer: null, \r\n      visualizerType: \"standard\",\r\n      spread: 1,\r\n      offset: 1.3,\r\n      param1: 2,\r\n      param2: 0.2,\r\n      colorIndex: 0,\r\n      presetName: \"\",\r\n      selectedPreset: 0,\r\n      presets: [],\r\n      sourceOptions: []\r\n    };\r\n    this.dbUrl = \"http://localhost:3001/presets\";\r\n    this.isLocalHost  = Boolean(\r\n      window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(\r\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n    );\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (window.confirm(\"Welcome to the @SethLovesToTalk Visualizer! If you'd like to use an audio output with the visualizer press 'OK' then make sure you click 'Entire Screen' and Check the 'Share Audio' box (You can only share a chrome tab's audio on MacOS unfortunately), if you'd like to use your Microphone then press 'Cancel'\")) {\r\n      let speaker = new MediaStream;\r\n      const mediaDevices = navigator.mediaDevices as any;\r\n      mediaDevices.getDisplayMedia({\r\n          video: true ,\r\n          audio: true\r\n      }).then((stream: MediaStream) => {\r\n          this.fetchPresets().then(this.randomPreset);\r\n          speaker.addTrack(stream.getAudioTracks()[0].clone());\r\n          // stopping and removing the video track to enhance the performance\r\n          stream.getVideoTracks()[0].stop();\r\n          stream.removeTrack(stream.getVideoTracks()[0]);\r\n          this.handleAudio(speaker);\r\n      }).catch(() => {\r\n          console.error('failed')\r\n      });\r\n    } else {\r\n      navigator.mediaDevices.getUserMedia({audio: true })\r\n      .then(this.handleAudio)\r\n      .catch(this.audioError);\r\n      this.fetchPresets().then(this.randomPreset);\r\n    }\r\n  }\r\n\r\n  fetchPresets(){\r\n    if (!this.isLocalHost){\r\n      return fetch('presetDb.json', {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      }\r\n      )\r\n        .then(function(response){\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({presets: json.presets});\r\n        });\r\n    }\r\n    else {\r\n      return axios.get(this.dbUrl).then((resp) => {\r\n        this.setState({presets: resp.data})\r\n      });\r\n    }\r\n  }\r\n\r\n  initializeAudioAnalyser = (stream: MediaStream) => {\r\n    const audioContext = new AudioContext();\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    analyser.smoothingTimeConstant = 0.5;\r\n    source.connect(analyser);\r\n    this.setState({\r\n      analyzer: analyser\r\n    })\r\n  }\r\n\r\n  handleAudio = (stream: MediaStream) => {\r\n    this.initializeAudioAnalyser(stream);\r\n  }\r\n\r\n  audioError = (err: any) => {\r\n    console.log(err);\r\n    alert(\"Something went wrong: \" + err.name);\r\n  }\r\n\r\n  getColor(index: number, total: number){\r\n    return \"#\" + Math.random().toString(16).slice(2, 8);\r\n  }\r\n\r\n  standard(height: number, spread: number, bins: number, width: number) {\r\n    const maxX = 18;\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let boxWidth = ((maxX*2.0)/bins) - spread;\r\n      let x = - (maxX+(maxX/bins)) + (2*maxX/bins)*(i+1);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={boxWidth} height={height} position={[x,0.5,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} />)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>\r\n      \r\n    )\r\n  }\r\n\r\n  standardRing(height: number, spread: number, bins: number, radius: number, extraRot: number) {\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let theta = i*Math.PI*2/bins;\r\n      let x = radius*Math.cos(theta);\r\n      let y = radius*Math.sin(theta);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={spread} height={height} position={[x,y,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} rot={Math.PI + theta + (Math.PI/2)*extraRot}/>)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  waveform(fidelity: number, height: number, bins: number, z: number) {\r\n    let lines = [];\r\n    const yMax = 2;\r\n    height = height > 0 ? height*2 : 0.1;\r\n    for (let i=0; i<bins; i++){\r\n      let y = - (yMax+(yMax/bins)) + (2*yMax/bins)*(i+1);\r\n      console.log(y);\r\n      lines.push(<WaveformLine analyzer={this.state.analyzer} position={[0,y,-z]} color={this.getColor(i, bins)} height={height} />);\r\n    };\r\n    return (\r\n      <>\r\n        {lines}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  horizontalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[0, (spread*-2) - offset, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[0, (spread*-1) - offset, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[0, 0 - offset, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[0, (spread*1) - offset, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[0, (spread*2) - offset, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[0, (spread*3) - offset, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  solidColor() {\r\n    return (\r\n      <>\r\n        <Plane analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  cube() {\r\n    return (\r\n      <>\r\n        <Cube analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  bolt() {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  circular(n: number, ringWidth: number) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  Racecar(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  Noise(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rings(ringSize: number, indexStart: number, n: number, ringWidth: number) {\r\n    const numRings = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numRings;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  verticalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[(spread*-2) - offset, 0, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[(spread*-1) - offset, 0, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[ 0 - offset, 0, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[(spread*1) - offset, 0, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[(spread*2) - offset, 0, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[(spread*3) - offset, 0, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  wires(spread: number, flat: boolean) {\r\n    return (\r\n      <>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[0]} freqRange={{start: 0, end:  2}} position = {[0,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[1]} freqRange={{start: 4, end:  10}} position = {[0 + spread,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[2]} freqRange={{start: 12, end:  16}} position = {[0 + spread*2,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[3]} freqRange={{start: 18, end:  22}} position = {[0 + spread*3,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[4]} freqRange={{start: 40, end:  60}} position = {[0 + spread*4,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[5]} freqRange={{start: 62, end:  80}} position = {[0 + spread*5,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[6]} freqRange={{start: 82, end:  100}} position = {[0 + spread*6,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[7]} freqRange={{start: 100, end:  140}} position = {[0 + spread*7,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[8]} freqRange={{start: 146, end:  190}} position = {[0 + spread*8,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[9]} freqRange={{start: 264, end:  542}} position = {[0 + spread*9,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[10]} freqRange={{start: 550, end:  852}} position = {[0 + spread*10,0,0]}  flat={flat}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderVisualizer(visualizerType: string, spread: number, offset: number, param1: number, param2: number){\r\n    switch(visualizerType) { \r\n      case \"standard\": { \r\n        return this.standard(spread, offset, param1, param2);\r\n      }\r\n      case \"waveform\": { \r\n        return this.waveform(spread, offset, param1, param2);\r\n      }\r\n      case \"standardRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 1);\r\n      }\r\n      case \"foldingRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 0);\r\n      }\r\n      case \"horizontalLines\": { \r\n        return this.horizontalLines(spread, offset);\r\n      }\r\n      case \"verticalLines\": { \r\n        return this.verticalLines(spread, offset);\r\n      }\r\n      case \"circular\": { \r\n        return this.circular(param1, param2);\r\n      }\r\n      case \"bolt\": { \r\n        return this.bolt();\r\n      } \r\n      case \"rings\": { \r\n        return this.rings(0.02, 1, param1, param2);\r\n      } \r\n      case \"fractal\": { \r\n        return this.rings(0.02, 0, param1, param2);\r\n      } \r\n      case \"solid\": { \r\n        return this.solidColor();\r\n      }\r\n      case \"cube\": { \r\n        return this.cube();\r\n      }\r\n      case \"wires\": { \r\n        return this.wires(spread, false);\r\n      }\r\n      case \"flat\": { \r\n        return this.wires(spread, true);\r\n      }\r\n      case \"racecar\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"trails\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, false);\r\n      }\r\n      case \"slide\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, false);\r\n      }\r\n      case \"noise\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"racecar_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      case \"trails_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, true);\r\n      }\r\n      case \"slide_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, true);\r\n      }\r\n      case \"noise_off\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      default: {\r\n        return this.circular(param1, param2);\r\n      } \r\n   } \r\n  }\r\n\r\n  visualizerChanged = (e: any) => {\r\n    this.setState({visualizerType: e.target.value});\r\n  }\r\n  \r\n  paletteChanged = (e: any) => {\r\n    this.setState({colorIndex: parseInt(e.target.value)});\r\n  }\r\n\r\n  presetNameChanged = (e: any) => {\r\n    this.setState({presetName: e.target.value});\r\n  }\r\n  \r\n  spreadChanged = (e: any, val: any) => {\r\n    this.setState({spread: val});\r\n  }\r\n\r\n  offsetChanged = (e: any, val: any) => {\r\n    this.setState({offset: val});\r\n  }\r\n\r\n  param1Changed = (e: any, val: any) => {\r\n    this.setState({param1: val});\r\n  }\r\n\r\n  param2Changed = (e: any, val: any) => {\r\n    this.setState({param2: val});\r\n  }\r\n\r\n  onSavePreset = (e: any) => {\r\n    let state: Preset = {\r\n      presetName: this.state.presetName,\r\n      visualizerType: this.state.visualizerType,\r\n      colorIndex: this.state.colorIndex,\r\n      spread: this.state.spread,\r\n      offset: this.state.offset,\r\n      param1: this.state.param1,\r\n      param2: this.state.param2\r\n    }\r\n    axios.post(this.dbUrl, state).then(()=> {\r\n      this.fetchPresets();\r\n      this.setState({presetName: \"\"});\r\n    }).catch((err) => console.log(err));\r\n  }\r\n\r\n  randomPreset = () => {\r\n    this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n  }\r\n\r\n  onPresetSelected = (e: any) => {\r\n    let selectedPreset = this.state.presets[e.target.value];\r\n    this.setState({ visualizerType: selectedPreset.visualizerType,\r\n      colorIndex: selectedPreset.colorIndex,\r\n      spread: selectedPreset.spread,\r\n      offset: selectedPreset.offset,\r\n      param1: selectedPreset.param1,\r\n      param2: selectedPreset.param2,\r\n      selectedPreset: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const visOptions = [\r\n      { value: 'standard', label: 'Standard' },\r\n      { value: 'waveform', label: 'Waveform' },\r\n      { value: 'standardRing', label: 'Circular' },\r\n      { value: 'foldingRing', label: 'Folding' },\r\n      { value: 'horizontalLines', label: 'Horizontal Lines' },\r\n      { value: 'verticalLines', label: 'Vertical Lines' },\r\n      { value: 'circular', label: 'Circles' },\r\n      { value: 'bolt', label: 'Lightning' },\r\n      { value: 'rings', label: 'Rings' },\r\n      { value: 'solid', label: 'Solid' },\r\n      { value: 'cube', label: 'Cube' },\r\n      { value: 'wires', label: \"Wires\"},\r\n      { value: 'flat', label: \"Flat\"},\r\n      { value: 'fractal', label: 'Fractal' },\r\n      { value: 'racecar', label: 'Race' },\r\n      { value: 'trails', label: 'Trails' },\r\n      { value: 'slide', label: 'Slide' },\r\n      { value: 'racecar_off', label: 'Helix' },\r\n      { value: 'trails_off', label: 'Layers' },\r\n      { value: 'slide_off', label: 'Carousel' },\r\n      { value: 'noise', label: 'Noise' },\r\n      { value: 'noise_off', label: 'Static' }\r\n    ];\r\n\r\n    return (\r\n      <>\r\n        <div id=\"uiContainer\">\r\n          <div id=\"selectContainer\">\r\n            <Button onClick={this.randomPreset} variant=\"contained\">\r\n              Random\r\n            </Button>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Visual\r\n              </InputLabel>\r\n              <Select id=\"visualizerType\"\r\n                  value={this.state.visualizerType}\r\n                  variant=\"outlined\"\r\n                  onChange={this.visualizerChanged}>\r\n                    {visOptions.map((o) => <MenuItem value={o.value}>{o.label}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Color Palette\r\n              </InputLabel>\r\n              <Select id=\"paletteType\"\r\n                value={this.state.colorIndex}\r\n                variant=\"outlined\"\r\n                onChange={this.paletteChanged}>\r\n                  {ColorPalettes.map((p, index) => <MenuItem value={index}>{p.name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Preset\r\n              </InputLabel>\r\n              <Select id=\"selectedPreset\"\r\n                label=\"Selected Preset\"\r\n                value={this.state.selectedPreset}\r\n                variant=\"outlined\"\r\n                onChange={this.onPresetSelected}>\r\n                  {this.state.presets.map((p: Preset, index: any) => <MenuItem value={index}>{p.presetName}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            {this.isLocalHost && \r\n            <>\r\n            <TextField id=\"presetName\"\r\n                value={this.state.presetName}\r\n                placeholder=\"Preset Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.presetNameChanged} \r\n            />\r\n            <Button id=\"savePreset\" onClick={this.onSavePreset} disabled={this.state.presetName === \"\"} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            </>}\r\n          </div>\r\n          <div id=\"sliderContainer\">\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param1}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.param1}\r\n                  step={1}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param1Changed}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param2}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.param2}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={3}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param2Changed}\r\n                />\r\n              </FormControl>  \r\n            </div>\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].spread}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.spread}\r\n                  step={0.5}\r\n                  min={0}\r\n                  max={1000}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.spreadChanged}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].offset}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.offset}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={20}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.offsetChanged}\r\n                />\r\n              </FormControl>   \r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Canvas className={'App'}>\r\n          <ambientLight intensity={0.5} />\r\n          <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\r\n          <pointLight position={[-10, -10, -10]} />\r\n          {this.renderVisualizer(this.state.visualizerType, this.state.spread, this.state.offset, this.state.param1, this.state.param2)}\r\n        </Canvas>\r\n      </>\r\n      \r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}