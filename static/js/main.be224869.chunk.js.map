{"version":3,"sources":["ColorPalette.ts","MathUtils.ts","HelpDialog.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ColorPalettes","name","palette_6","palette_11","calculateVectorBetweenVectors","x1","x2","y1","y2","angle","Math","atan2","calculateAngleBetweenVectors","angleToVector","sin","cos","useStyles","makeStyles","theme","title","textAlign","fontSize","containsText","color","padding","seperator","border","borderRadius","width","shortcutItem","paddingLeft","shortcutKey","maxWidth","shortcutHeaders","fontWeight","inputButton","backgroundColor","blue","margin","buttonContainer","display","justifyContent","shortcuts","key","text","HelpDialog","props","classes","close","open","setSpeakerAsInput","setMicAsInput","Dialog","onClose","DialogTitle","className","DialogContentText","Button","onClick","List","ListItem","ListItemText","primary","map","shortcut","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","state","current","update","useState","enableAutoRotate","setEnableAutoRotate","useEffect","window","addEventListener","e","reset","ref","args","autoRotate","StandardBox","geoRef","lineRef","topVertices","bufferLength","amplitudeArray","Uint8Array","analyzer","frequencyBinCount","getByteFrequencyData","vertices","freqData","nums","freqArray","subarray","freqRange","start","end","freqAvg","length","reduce","a","b","i","y","height","updateHeight","verticesNeedUpdate","scale","rotation","rot","attach","WaveformLine","linePoints","push","Vector2","size","getByteTimeDomainData","setFromPoints","points","graphFrequencyData","HorizontalLine","random","waveFunc","pow","exp","abs","x","PI","Date","now","VerticalLine","Plane","freqRanges","material","set","loudestAmp","loudestBand","range","index","averageAmp","getColor","z","side","DoubleSide","Cube","Ring","scaleRate","offset","n","stepSize","t","indexStart","ringWidth","ringFuzz","position","radius","ringSize","Bolt","Circle","average","bolt","circleFuzz","Racecar","hasSetMesh","pos","setPos","setShape","geometry","newRotation","newPosition","loop","seperate","newT","speed","lineWidth","Vector3","calculatePosition","offaxis","lookAt","movementVector","Noise","Wire","QuadraticBezierCurve3","getPoints","flat","fuzz","useUpdate","App","dbUrl","isLocalHost","sliderLabels","param1","param2","spread","setSpeakerAsSource","speaker","MediaStream","navigator","mediaDevices","getDisplayMedia","video","audio","then","stream","fetchPresets","randomPreset","addTrack","getAudioTracks","clone","getVideoTracks","stop","removeTrack","handleAudio","catch","console","error","setState","showHelp","setMicrophoneAsSource","getUserMedia","audioError","initializeAudioAnalyser","audioContext","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","smoothingTimeConstant","connect","err","log","alert","backgroundChanged","colorString","css","document","getElementById","style","bgColor","toggleUi","showUi","opacity","visualizerChanged","visualizerType","target","value","paletteChanged","colorIndex","parseInt","presetNameChanged","presetName","spreadChanged","val","offsetChanged","param1Changed","param2Changed","onSavePreset","axios","post","onPresetSelected","floor","presets","selectedPreset","randomCycle","shouldCycle","helpClicked","sourceOptions","cycleTime","currentInterval","Boolean","location","hostname","match","this","onKeyPressed","bind","removeEventListener","toLowerCase","showAlertText","alertText","setCycleInterval","clearCycleInterval","clearInterval","setInterval","get","resp","data","fetch","headers","response","json","alertDiv","child","firstChild","removeChild","textDiv","createElement","innerHTML","appendChild","total","toString","slice","bins","posY","binWidth","boxes","boxWidth","maxX","extraRot","theta","fidelity","lines","numCircles","maxRadius","radiusScale","numRings","standard","waveform","standardRing","horizontalLines","verticalLines","circular","rings","solidColor","cube","wires","id","variant","FormControl","InputLabel","defaultValue","onChange","Select","label","o","MenuItem","p","TextField","placeholder","disabled","Slider","step","min","max","valueLabelDisplay","onKeyDown","intensity","renderVisualizer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.be224869.chunk.js","sourcesContent":["interface ColorPalette {\r\n    name: string;\r\n    palette_6: string[];\r\n    palette_11: string[];\r\n}\r\n\r\nexport const ColorPalettes: ColorPalette[] = [\r\n    {\r\n        name: 'Rainbow',\r\n        palette_6: [\"#A800FF\", \"#0079FF\", \"#00F11D\", \"#FFEF00\", \"#FF7F00\", \"#FF0900\"],\r\n        palette_11: [\"#8D5BFF\", \"#6D5BFF\", \"#5B8FFF\", \"#5BFFE7\", \"#5BFF76\", \"#CAFF5B\", \"#FFE05B\", \"#FFA75B\", \"#FF6B5B\", \"#FF5B89\", \"#FF2E37\"]\r\n    },\r\n    {\r\n        name: 'SL2T_1',\r\n        palette_6: [\"#46237A\", \"#FFB400\", \"#CFFFB3\", \"#337CA0\", \"#EE5622\", \"#3A5311\"],\r\n        palette_11: [\"#46237A\", \"#D1B1CB\", \"#DDCAD9\", \"#FFB400\", \"#EE5622\", \"#337CA0\", \"3891A6\", \"#2EC4B6\", \"#9FC490\", \"#CFFFB3\", \"#3A5311\"]\r\n    },\r\n    {\r\n        name: 'Cyberpunk',\r\n        palette_6: [\"#2d00f7\", \"#8900f2\", \"#b100e8\", \"#db00b6\", \"#f20089\", \"#faff00\"],\r\n        palette_11: [\"#2d00f7\", \"#6a00f4\", \"#8900f2\", \"#a100f2\", \"#b100e8\", \"#bc00dd\", \"#db00b6\", \"#e500a4\", \"#f20089\", \"#faff00\", \"#faff09\"]\r\n    },\r\n    {\r\n        name: 'Ocean',\r\n        palette_6: [\"#014f86\", \"#2c7da0\", \"#468faf\", \"#90e0ef\", \"#ade8f4\", \"#caf0f8\"],\r\n        palette_11: [\"#013a63\", \"#01497c\", \"#014f86\", \"#2a6f97\", \"#2c7da0\", \"#2c7da0\", \"#468faf\", \"#61a5c2\", \"#89c2d9\", \"#a9d6e5\", \"#caf0f8\"]\r\n    },\r\n    {\r\n        name: 'Sunset',\r\n        palette_6: [\"#d00000\", \"#dc2f02\", \"#e85d04\", \"#f48c06\", \"#faa307\", \"#ffba08\"],\r\n        palette_11: [\"#6a040f\",\"#d00000\",\"#dc2f02\", \"#dc2f02\", \"#e85d04\", \"#EE5622\", \"#f48c06\", \"#faa307\", \"#ffba12\", \"#ffba08\", \"#faff00\"]\r\n    },\r\n    {\r\n        name: 'Earth',\r\n        palette_6: [\"#606c38\", \"#283618\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"],\r\n        palette_11: [\"#606c38\", \"#ccd5ae\", \"#e9edc9\", \"#d4a373\", \"#edf2f4\", \"#283618\",\"#faedcd\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"]\r\n    },\r\n    {\r\n        name: 'Cherry Blossom',\r\n        palette_6: [\"#D6B95A\", \"#69306D\", \"#A5668B\", \"#4CBFAC\", \"#D00000\", \"#F2D7EE\"],\r\n        palette_11: [\"#D6B95A\", \"#DEFFF2\", \"#4CBFAC\", \"#F2D7EE\", \"#A1275D\", \"#FFFFFF\",\"#A1275D\", \"#F2D7EE\", \"#4CBFAC\", \"#DEFFF2\", \"#D6B95A\"]\r\n    },\r\n]\r\n\r\n// {\r\n//     name: '',\r\n//     palette_6: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\r\n//     palette_11: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\",\"#\", \"#\", \"#\", \"#\", \"#\"]\r\n// },\r\n    ","export const vectorToAngle = (x: number, y: number): number => {\r\n    return Math.atan2(x, y)\r\n}\r\n\r\nexport const calculateAngleBetweenVectors = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    return Math.atan2((x1 - x2), (y1 - y2))\r\n}\r\n\r\nexport const calculateVectorBetweenVectors = (x1: number, x2: number, y1: number, y2: number): [number, number] => {\r\n    const angle = calculateAngleBetweenVectors(x1, x2, y1, y2)\r\n    return angleToVector(angle)\r\n}\r\n\r\nexport const angleToVector = (angle: number): [number, number] => {\r\n    const xVector = Math.sin(angle)\r\n    const yVector = Math.cos(angle)\r\n\r\n    return [xVector, yVector]\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport { Dialog, DialogTitle, List, ListItem, ListItemAvatar, Avatar, ListItemText, DialogContentText, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        textAlign: 'center',\r\n        '& h2': {\r\n            fontSize: '2.25em'\r\n        }\r\n    },\r\n    containsText: {\r\n        color: 'black',\r\n        padding: '10px',\r\n    },\r\n    seperator: {\r\n        border: \"1px solid black\",\r\n        borderRadius: '75px',\r\n        width: '80%'\r\n    },\r\n    shortcutItem:{\r\n        paddingLeft: '5%',\r\n    },\r\n    shortcutKey:{\r\n        maxWidth: '150px'\r\n    },\r\n    shortcutHeaders:{\r\n        paddingLeft: '5%',\r\n        '& span': {\r\n            fontWeight: 'bold'\r\n        }\r\n    },\r\n    inputButton: {\r\n        backgroundColor: blue[100],\r\n        color: 'black',\r\n        width: '33%',\r\n        margin: '20px'\r\n    },\r\n    buttonContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}));\r\n\r\n\r\nconst shortcuts = [\r\n    {\r\n        key: \"R\",\r\n        text: \"Random Preset\"\r\n    },\r\n    {\r\n        key: \"C\",\r\n        text: \"Toggle automatic cycling\"\r\n    },\r\n    {\r\n        key: \"Up\",\r\n        text: \"Increase cycle period\"\r\n    },\r\n    {\r\n        key: \"Down\",\r\n        text: \"Decrease cycle period\"\r\n    },\r\n    {\r\n        key: \"Left Mouse\",\r\n        text: \"Rotate Camera\"\r\n    },\r\n    {\r\n        key: \"Middle Mouse\",\r\n        text: \"Zoom\"\r\n    },\r\n    {\r\n        key: \"Right Mouse\",\r\n        text: \"Pan Camera\"\r\n    },\r\n    {\r\n        key: \"G\",\r\n        text: \"Green Screen Background\"\r\n    },\r\n    {\r\n        key: \"B\",\r\n        text: \"Blue Screen Background\"\r\n    },\r\n    {\r\n        key: \"H\",\r\n        text: \"Random Background\"\r\n    },\r\n    {\r\n        key: \"U\",\r\n        text: \"Toggle UI\"\r\n    },\r\n    {\r\n        key: \".\",\r\n        text: \"Reset Camera\"\r\n    },\r\n    {\r\n        key: \",\",\r\n        text: \"Enable Camera Autorotate\"\r\n    }\r\n];  \r\n\r\nexport default function HelpDialog(props: any) {\r\n    const classes = useStyles();\r\n    const { close, open, setSpeakerAsInput, setMicAsInput } = props;\r\n\r\n    const welcomeText = \"Before we can start, you'll need to decide whether you want to use your computer's microphone or your speakers as the visualizer's input. (NOTE: If you select 'Speakers', a menu will pop up asking you to select your source. If on Windows, select any screen, and make sure the 'Share Audio' button in the bottom left is selected. On Mac, this option is only present from selecting a chrome tab, so any audio you want to visualize will need to come from that tab.)\";\r\n\r\n    const shortcutText = \"I made this audio visualizer to be fully customizable, there's over 20 different visualiztion types, with multiple parameters to change each one. I've provided over 75 presets from my testing that look cool, but play around and find what you think looks cool! Here are some handy shortcuts that I've made to help make using the visualizer easier.\";\r\n\r\n    return (\r\n        <Dialog onClose={close} open={open}>\r\n            <DialogTitle className={classes.title}>Welcome to the Talkulizer!</DialogTitle>\r\n            <DialogContentText className={classes.containsText}>{welcomeText}</DialogContentText>\r\n            <div className={classes.buttonContainer}>\r\n                <Button className={classes.inputButton} onClick={setSpeakerAsInput}>Speakers</Button>\r\n                <Button className={classes.inputButton} onClick={setMicAsInput}>Mic</Button>\r\n            </div>\r\n            <hr className={classes.seperator}></hr>\r\n            <DialogContentText className={classes.containsText}>{shortcutText}</DialogContentText>\r\n            <List>\r\n                <ListItem className={classes.shortcutHeaders} key={\"headers\"}>\r\n                    <ListItemText className={classes.shortcutKey} primary={\"Key\"} />\r\n                    <ListItemText primary={\"Description\"} />\r\n                </ListItem>\r\n                {shortcuts.map((shortcut) => (\r\n                <ListItem className={classes.shortcutItem} key={shortcut.key}>\r\n                    <ListItemText className={classes.shortcutKey} primary={shortcut.key} />\r\n                    <ListItemText primary={shortcut.text} />\r\n                </ListItem>\r\n                ))}\r\n            </List>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nHelpDialog.propTypes = {\r\n    close: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    setSpeakerAsInput: PropTypes.func.isRequired,\r\n    setMicAsInput: PropTypes.func.isRequired\r\n};","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Canvas, extend, useFrame, useThree, useUpdate } from 'react-three-fiber';\r\nimport { BufferGeometry, Vector2, DoubleSide, Vector3, QuadraticBezierCurve3 } from 'three';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport './App.css';\r\nimport { MenuItem, Select, TextField, Slider, Button, InputLabel, FormControl } from '@material-ui/core';\r\nimport { ColorPalettes } from './ColorPalette';\r\nimport axios from 'axios';\r\nimport { calculateVectorBetweenVectors, vectorToAngle } from './MathUtils';\r\nimport { ColorPicker } from 'material-ui-color';\r\nimport HelpDialog from './HelpDialog';\r\nextend({ OrbitControls });\r\n\r\n\r\ninterface FrequencyRange {\r\n  start: number;\r\n  end: number;\r\n  color?: string;\r\n}\r\n\r\ninterface SliderOptions{\r\n  param1: string;\r\n  param2: string;\r\n  offset: string;\r\n  spread: string;\r\n}\r\n\r\ninterface Preset {\r\n  presetName: string;\r\n  visualizerType: string,\r\n  colorIndex: number,\r\n  spread: number,\r\n  offset: number,\r\n  param1: number,\r\n  param2: number,\r\n  bgColor: string\r\n}\r\n\r\nconst CameraControls = () => {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef();\r\n  // @ts-ignore\r\n  useFrame((state) => controls.current.update());\r\n\r\n  const [enableAutoRotate, setEnableAutoRotate] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    window.addEventListener('keydown', (e) => { \r\n      if (e.key == \".\") {\r\n        // @ts-ignore\r\n        controls.current?.reset()\r\n      }\r\n      if (e.key == \",\") {\r\n        setEnableAutoRotate(enableAutoRotate => !enableAutoRotate);\r\n      }\r\n    });\r\n  }, [controls])\r\n  \r\n  // @ts-ignore\r\n  return <orbitControls ref={controls} args={[camera, domElement]} autoRotate={enableAutoRotate} />;\r\n};\r\n\r\n\r\nfunction StandardBox(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const topVertices = [true,true,false,false, true, true, false, false];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function updateHeight(vertices: Vector3[], freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i=0; i < vertices.length; i++){\r\n      vertices[i].y = !topVertices[i] ? 0 : props.height*freqAvg/(255.0);\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      updateHeight(geoRef.current.vertices, amplitudeArray);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        ref={lineRef}\r\n        {...props}\r\n        scale={[1.0*props.width, 1, 0]}\r\n        rotation={[0,0, !!props.rot ? props.rot : 0]}\r\n      >\r\n        <boxGeometry ref={geoRef} attach=\"geometry\" />\r\n        <meshBasicMaterial color={props.color} />\r\n      </mesh>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nfunction WaveformLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 2048;\r\n  const size = 12.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size/2 + (-2*size*i/lineSegments), 0));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array) {\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (freqData[i]-128.0)* props.height / 128.0;\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteTimeDomainData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction HorizontalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction VerticalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].x = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].y)*0.65)*Math.cos(2*Math.PI*points[i].y + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction Plane(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <planeBufferGeometry ref={geoRef} args={[3,3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Cube(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <boxBufferGeometry ref={geoRef} args={[3,3, 3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Ring(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function ringFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0));\r\n    const n = props.n > 2 ? props.n : 2;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = !props.indexStart ? i*stepSize : i+1.0*stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(n*t))*Math.cos(t + Date.now() * 0.001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(n*t))*Math.sin(t + Date.now() * 0.001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n     if (lineRef && lineRef.current && geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.vertices = ringFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n      if (lineRef.current.scale.x > 10) {\r\n        lineRef.current.scale.set(0.01, 0.01, 1);\r\n        lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.radius, props.radius, 1]}>\r\n      <ringGeometry ref={geoRef} args={[1-(props.ringSize/2.0), 1+(props.ringSize/2.0), 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Bolt(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[ 1, 1, 1]}>\r\n      <circleBufferGeometry ref={geoRef} args={[1, 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Circle(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n\r\n  useEffect(()=> {\r\n    for (let i = 0; i < lineSegments; i++) {\r\n      linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n    }\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function circleFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0))*0.1;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = i+1 * stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(props.n*t))*Math.cos(t + Date.now() * 0.0001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(props.n*t))*Math.sin(t + Date.now() * 0.0001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      if (props.bolt) {\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n      }\r\n      else {\r\n        lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.vertices = circleFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n        geoRef.current.verticesNeedUpdate = true;\r\n        if (lineRef.current.scale.x > 10) {\r\n          lineRef.current.scale.set(0.01, 0.01, 1);\r\n          lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.bolt ? 1 : props.radius, props.bolt ? 1 : props.radius, 1]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Racecar(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].x = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else{\r\n        const movementVector = calculateVectorBetweenVectors(lineRef.current.position.x, newPosition.x, newPosition.y, lineRef.current.position.y);\r\n        const angle = vectorToAngle(movementVector[0], movementVector[1]);\r\n        lineRef.current.rotation.z = angle+(Math.PI/2);\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Noise(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].z = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else {\r\n        lineRef.current.lookAt(new Vector3(newPosition.x, newPosition.y, 1));\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Wire(props: any) {\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const curve = new QuadraticBezierCurve3(\r\n    new Vector3( 0, 1, 0 ),\r\n    new Vector3( 0, 0.25, 0.2 ),\r\n    new Vector3( 0, 0, 1 )\r\n  );\r\n\r\n  const points = curve.getPoints(1024);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.flat) {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].y = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z);\r\n      }\r\n    }\r\n    else if (props.fuzz){\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = Math.random()*(freqAvg/(255.0));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z); \r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(points, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n\r\n  const geoRef = useUpdate((geometry: BufferGeometry) => {\r\n    geometry.setFromPoints(points)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, 30*Math.PI/180, 0]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default class App extends React.Component<any, any> {\r\n  private dbUrl: string;\r\n  private isLocalHost: Boolean;\r\n  private sliderLabels: Record<string, SliderOptions> = {\r\n    'standard': {\r\n      param1: 'Bars',\r\n      param2: 'Y Position',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'waveform': {\r\n      param1: 'Lines',\r\n      param2: 'Z Position',\r\n      offset: 'Height',\r\n      spread: '',\r\n    },\r\n    'standardRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'foldingRing': {\r\n      param1: 'Bars',\r\n      param2: 'Radius',\r\n      offset: 'Spread',\r\n      spread: 'Height',\r\n    },\r\n    'horizontalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'verticalLines': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: 'Spread',\r\n      spread: 'Offset',\r\n    },\r\n    'circular': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'bolt': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'rings': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'fractal': {\r\n      param1: 'n',\r\n      param2: 'Radius',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'solid': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'cube': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: '',\r\n    },\r\n    'wires': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'flat': {\r\n      param1: '',\r\n      param2: '',\r\n      offset: '',\r\n      spread: 'Spread',\r\n    },\r\n    'racecar': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'racecar_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'trails_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'slide_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    },\r\n    'noise_off': {\r\n      param1: 'n',\r\n      param2: 'Scale',\r\n      offset: 'Path',\r\n      spread: 'Speed',\r\n    }\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      analyzer: null, \r\n      visualizerType: \"standard\",\r\n      spread: 1,\r\n      offset: 1.3,\r\n      param1: 2,\r\n      param2: 0.2,\r\n      colorIndex: 0,\r\n      presetName: \"\",\r\n      selectedPreset: 0,\r\n      presets: [],\r\n      sourceOptions: [],\r\n      shouldCycle: false,\r\n      cycleTime: 2000,\r\n      currentInterval: null,\r\n      bgColor: \"#040d1b\",\r\n      showHelp: true,\r\n      showUi: true\r\n    };\r\n    this.dbUrl = \"http://localhost:3001/presets\";\r\n    this.isLocalHost  = Boolean(\r\n      window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(\r\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n    );\r\n  }\r\n\r\n  componentDidMount(){\r\n    document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n  }\r\n\r\n  onKeyPressed(e: any) {\r\n    switch(e.key.toLowerCase()){\r\n      case \"r\":\r\n        this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n        this.showAlertText(\"Random Preset\");\r\n        break;\r\n      case \"c\":\r\n        this.setState({shouldCycle: !this.state.shouldCycle});\r\n        let alertText = this.state.shouldCycle ? `Cycle (${this.state.cycleTime / 1000}s)` : \"Cycle (Off)\";\r\n        if (this.state.shouldCycle) {\r\n          this.setCycleInterval(this.state.cycleTime);\r\n        }\r\n        else {\r\n          this.clearCycleInterval();\r\n        }\r\n        this.showAlertText(alertText);\r\n        break;\r\n      case \"g\":\r\n        this.backgroundChanged(\"#00ff00\");\r\n        this.showAlertText(\"Green Background\");\r\n        break;\r\n      case \"b\":\r\n        this.backgroundChanged(\"#0000ff\");\r\n        this.showAlertText(\"Blue Background\");\r\n        break;\r\n      case \"h\":\r\n        this.backgroundChanged(this.getColor(null, null));\r\n        this.showAlertText(\"Random Background\");\r\n        break;\r\n      case \"arrowup\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime < 1000){\r\n          this.setState({cycleTime: 1000});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime + 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime + 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      case \"arrowdown\":\r\n        if (!this.state.shouldCycle){\r\n          break;\r\n        }\r\n        if (this.state.cycleTime <= 1000){\r\n          this.setState({cycleTime: 500});\r\n        }\r\n        else if (this.state.cycleTime >= 30000){\r\n          this.setState({cycleTime: this.state.cycleTime - 5000});\r\n        }\r\n        else {\r\n          this.setState({cycleTime: this.state.cycleTime - 1000});\r\n        }\r\n        this.setCycleInterval(this.state.cycleTime);\r\n        this.showAlertText(`Cycle (${this.state.cycleTime / 1000}s)`);\r\n        break;\r\n      case \"u\":\r\n        this.toggleUi();\r\n        this.showAlertText(this.state.showUi ? `Toggle UI (On)` : \"Toggle UI (Off)\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  clearCycleInterval(){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n  }\r\n\r\n  setCycleInterval(cycleTime: number){\r\n    if (this.state.currentInterval) {\r\n      clearInterval(this.state.currentInterval);\r\n    }\r\n    this.setState({currentInterval: setInterval(this.randomPreset, cycleTime)});\r\n  }\r\n\r\n  setSpeakerAsSource = () => {\r\n    let speaker = new MediaStream;\r\n    const mediaDevices = navigator.mediaDevices as any;\r\n    mediaDevices.getDisplayMedia({\r\n        video: true ,\r\n        audio: true\r\n    }).then((stream: MediaStream) => {\r\n        this.fetchPresets().then(this.randomPreset);\r\n        speaker.addTrack(stream.getAudioTracks()[0].clone());\r\n        // stopping and removing the video track to enhance the performance\r\n        stream.getVideoTracks()[0].stop();\r\n        stream.removeTrack(stream.getVideoTracks()[0]);\r\n        this.handleAudio(speaker);\r\n    }).catch(() => {\r\n        console.error('failed')\r\n    });\r\n    this.setState({showHelp: false})\r\n  }\r\n\r\n  setMicrophoneAsSource = () => {\r\n    navigator.mediaDevices.getUserMedia({audio: true })\r\n    .then(this.handleAudio)\r\n    .catch(this.audioError);\r\n    this.fetchPresets().then(this.randomPreset);\r\n    this.setState({showHelp: false})\r\n  }\r\n\r\n  fetchPresets(){\r\n    if (!this.isLocalHost){\r\n      return fetch('presetDb.json', {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      }\r\n      )\r\n        .then(function(response){\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({presets: json.presets});\r\n        });\r\n    }\r\n    else {\r\n      return axios.get(this.dbUrl).then((resp) => {\r\n        this.setState({presets: resp.data})\r\n      });\r\n    }\r\n  }\r\n\r\n  showAlertText(text: string){\r\n    let alertDiv = document.getElementById(\"alert-text\");\r\n    let child = alertDiv.firstChild;\r\n    if (!!child){\r\n      alertDiv.removeChild(child)\r\n    }\r\n    let textDiv = document.createElement(\"div\");\r\n    textDiv.className = \"fade\";\r\n    textDiv.innerHTML = text;\r\n    alertDiv.appendChild(textDiv);\r\n  }\r\n\r\n  initializeAudioAnalyser = (stream: MediaStream) => {\r\n    const audioContext = new AudioContext();\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    analyser.smoothingTimeConstant = 0.5;\r\n    source.connect(analyser);\r\n    this.setState({\r\n      analyzer: analyser\r\n    })\r\n  }\r\n\r\n  handleAudio = (stream: MediaStream) => {\r\n    this.initializeAudioAnalyser(stream);\r\n  }\r\n\r\n  audioError = (err: any) => {\r\n    console.log(err);\r\n    alert(\"Something went wrong: \" + err.name);\r\n  }\r\n\r\n  getColor(index: number, total: number){\r\n    return \"#\" + Math.random().toString(16).slice(2, 8);\r\n  }\r\n\r\n  standard(height: number, spread: number, bins: number, posY: number) {\r\n    const maxX = 18;\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let boxWidth = ((maxX*2.0)/bins) - spread;\r\n      let x = - (maxX+(maxX/bins)) + (2*maxX/bins)*(i+1);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={boxWidth} height={height} position={[x,-posY*2,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} />)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>\r\n      \r\n    )\r\n  }\r\n\r\n  standardRing(height: number, spread: number, bins: number, radius: number, extraRot: number) {\r\n    let binWidth = Math.floor(1024/bins);\r\n    let boxes = [];\r\n    for (let i=0; i<bins; i++){\r\n      let theta = i*Math.PI*2/bins;\r\n      let x = radius*Math.cos(theta);\r\n      let y = radius*Math.sin(theta);\r\n      boxes.push(<StandardBox analyzer={this.state.analyzer} width={spread} height={height} position={[x,y,-10]} color={this.getColor(i, bins)} freqRange={{start: binWidth*i, end: binWidth*i+binWidth-1}} rot={Math.PI + theta + (Math.PI/2)*extraRot}/>)\r\n    }\r\n    return (\r\n      <>\r\n        {boxes}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  waveform(fidelity: number, height: number, bins: number, z: number) {\r\n    let lines = [];\r\n    const yMax = 2;\r\n    height = height > 0 ? height*2 : 0.1;\r\n    for (let i=0; i<bins; i++){\r\n      let y = - (yMax+(yMax/bins)) + (2*yMax/bins)*(i+1);\r\n      lines.push(<WaveformLine analyzer={this.state.analyzer} position={[0,y,-z]} color={this.getColor(i, bins)} height={height} />);\r\n    };\r\n    return (\r\n      <>\r\n        {lines}\r\n      </>    \r\n    )\r\n  }\r\n\r\n  horizontalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[0, (spread*-2) - offset, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[0, (spread*-1) - offset, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[0, 0 - offset, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[0, (spread*1) - offset, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[0, (spread*2) - offset, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[0, (spread*3) - offset, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  solidColor() {\r\n    return (\r\n      <>\r\n        <Plane analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  cube() {\r\n    return (\r\n      <>\r\n        <Cube analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  bolt(scaleRate: number = 0.01) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    return (\r\n      <>\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 0]} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 1]} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 2]} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 3]} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 4]} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Bolt analyzer={this.state.analyzer} position={[0, 0, 5]} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  circular(n: number, ringWidth: number, scaleRate: number = 0.01) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    return (\r\n      <>\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 0]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 1]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 2]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 3]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 4]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Circle analyzer={this.state.analyzer} position={[0, 0, 5]} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  Racecar(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  Noise(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rings(ringSize: number, indexStart: number, n: number, ringWidth: number, scaleRate: number = 0.01) {\r\n    const numRings = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numRings;\r\n    return (\r\n      <>\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 0]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 1]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 2]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 3]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 4]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Ring analyzer={this.state.analyzer} position={[0, 0, 5]} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  verticalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[(spread*-2) - offset, 0, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[(spread*-1) - offset, 0, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[ 0 - offset, 0, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[(spread*1) - offset, 0, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[(spread*2) - offset, 0, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[(spread*3) - offset, 0, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  wires(spread: number, flat: boolean) {\r\n    return (\r\n      <>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[0]} freqRange={{start: 0, end:  2}} position = {[0,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[1]} freqRange={{start: 4, end:  10}} position = {[0 + spread,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[2]} freqRange={{start: 12, end:  16}} position = {[0 + spread*2,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[3]} freqRange={{start: 18, end:  22}} position = {[0 + spread*3,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[4]} freqRange={{start: 40, end:  60}} position = {[0 + spread*4,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[5]} freqRange={{start: 62, end:  80}} position = {[0 + spread*5,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[6]} freqRange={{start: 82, end:  100}} position = {[0 + spread*6,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[7]} freqRange={{start: 100, end:  140}} position = {[0 + spread*7,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[8]} freqRange={{start: 146, end:  190}} position = {[0 + spread*8,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[9]} freqRange={{start: 264, end:  542}} position = {[0 + spread*9,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[10]} freqRange={{start: 550, end:  852}} position = {[0 + spread*10,0,0]}  flat={flat}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderVisualizer(visualizerType: string, spread: number, offset: number, param1: number, param2: number){\r\n    switch(visualizerType) { \r\n      case \"standard\": { \r\n        return this.standard(spread, offset, param1, param2);\r\n      }\r\n      case \"waveform\": { \r\n        return this.waveform(spread, offset, param1, param2);\r\n      }\r\n      case \"standardRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 1);\r\n      }\r\n      case \"foldingRing\": { \r\n        return this.standardRing(spread, offset, param1, param2, 0);\r\n      }\r\n      case \"horizontalLines\": { \r\n        return this.horizontalLines(spread, offset);\r\n      }\r\n      case \"verticalLines\": { \r\n        return this.verticalLines(spread, offset);\r\n      }\r\n      case \"circular\": { \r\n        return this.circular(param1, param2, 0);\r\n      }\r\n      case \"bolt\": { \r\n        return this.bolt(0);\r\n      } \r\n      case \"rings\": { \r\n        return this.rings(0.02, 1, param1, param2, 0);\r\n      } \r\n      case \"fractal\": { \r\n        return this.rings(0.02, 0, param1, param2, 0);\r\n      } \r\n      case \"solid\": { \r\n        return this.solidColor();\r\n      }\r\n      case \"cube\": { \r\n        return this.cube();\r\n      }\r\n      case \"wires\": { \r\n        return this.wires(spread, false);\r\n      }\r\n      case \"flat\": { \r\n        return this.wires(spread, true);\r\n      }\r\n      case \"racecar\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"trails\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, false);\r\n      }\r\n      case \"slide\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, false);\r\n      }\r\n      case \"noise\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"racecar_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      case \"trails_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, true);\r\n      }\r\n      case \"slide_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, true);\r\n      }\r\n      case \"noise_off\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      default: {\r\n        return this.circular(param1, param2);\r\n      } \r\n   } \r\n  }\r\n\r\n  backgroundChanged = (color: any) => {\r\n    const colorString = color.css?.backgroundColor || color;\r\n    document.getElementById(\"root\").style.backgroundColor = colorString;\r\n    this.setState({bgColor: colorString});\r\n  }\r\n\r\n  toggleUi = () => {\r\n    this.setState({showUi: !this.state.showUi});\r\n    document.getElementById(\"uiContainer\").style.height = this.state.showUi ? \"auto\" : \"0\";\r\n    document.getElementById(\"uiContainer\").style.opacity = this.state.showUi ? \"1\" : \"0\";\r\n\r\n  }\r\n\r\n  visualizerChanged = (e: any) => {\r\n    this.setState({visualizerType: e.target.value});\r\n  }\r\n  \r\n  paletteChanged = (e: any) => {\r\n    this.setState({colorIndex: parseInt(e.target.value)});\r\n  }\r\n\r\n  presetNameChanged = (e: any) => {\r\n    this.setState({presetName: e.target.value});\r\n  }\r\n  \r\n  spreadChanged = (e: any, val: any) => {\r\n    this.setState({spread: val});\r\n  }\r\n\r\n  offsetChanged = (e: any, val: any) => {\r\n    this.setState({offset: val});\r\n  }\r\n\r\n  param1Changed = (e: any, val: any) => {\r\n    this.setState({param1: val});\r\n  }\r\n\r\n  param2Changed = (e: any, val: any) => {\r\n    this.setState({param2: val});\r\n  }\r\n\r\n  onSavePreset = (e: any) => {\r\n    let state: Preset = {\r\n      presetName: this.state.presetName,\r\n      visualizerType: this.state.visualizerType,\r\n      colorIndex: this.state.colorIndex,\r\n      spread: this.state.spread,\r\n      offset: this.state.offset,\r\n      param1: this.state.param1,\r\n      param2: this.state.param2,\r\n      bgColor: this.state.bgColor\r\n    }\r\n    axios.post(this.dbUrl, state).then(()=> {\r\n      this.fetchPresets();\r\n      this.setState({presetName: \"\"});\r\n    }).catch((err) => console.log(err));\r\n  }\r\n\r\n  randomPreset = () => {\r\n    this.onPresetSelected({target: { value: Math.floor(Math.random()*this.state.presets.length)}});\r\n  }\r\n\r\n  onPresetSelected = (e: any) => {\r\n    let selectedPreset = this.state.presets[e.target.value];\r\n    this.setState({ visualizerType: selectedPreset.visualizerType,\r\n      colorIndex: selectedPreset.colorIndex,\r\n      spread: selectedPreset.spread,\r\n      offset: selectedPreset.offset,\r\n      param1: selectedPreset.param1,\r\n      param2: selectedPreset.param2,\r\n      selectedPreset: e.target.value\r\n    });\r\n    this.backgroundChanged(this.state.bgColor !== '#00ff00' && this.state.bgColor !== '#0000ff' &&  !!selectedPreset.bgColor ? selectedPreset.bgColor : this.state.bgColor);\r\n  }\r\n\r\n  randomCycle = () => {\r\n    if (this.state.shouldCycle){\r\n      this.randomPreset();\r\n    }\r\n  }\r\n\r\n  helpClicked = () => {\r\n    this.setState({showHelp: !this.state.showHelp});\r\n  }\r\n\r\n  render() {\r\n    const visOptions = [\r\n      { value: 'standard', label: 'Standard' },\r\n      { value: 'waveform', label: 'Waveform' },\r\n      { value: 'standardRing', label: 'Circular' },\r\n      { value: 'foldingRing', label: 'Folding' },\r\n      { value: 'horizontalLines', label: 'Horizontal Lines' },\r\n      { value: 'verticalLines', label: 'Vertical Lines' },\r\n      { value: 'circular', label: 'Circles' },\r\n      { value: 'bolt', label: 'Lightning' },\r\n      { value: 'rings', label: 'Rings' },\r\n      { value: 'solid', label: 'Solid' },\r\n      { value: 'cube', label: 'Cube' },\r\n      { value: 'wires', label: \"Wires\"},\r\n      { value: 'flat', label: \"Flat\"},\r\n      { value: 'fractal', label: 'Fractal' },\r\n      { value: 'racecar', label: 'Race' },\r\n      { value: 'trails', label: 'Trails' },\r\n      { value: 'slide', label: 'Slide' },\r\n      { value: 'racecar_off', label: 'Helix' },\r\n      { value: 'trails_off', label: 'Layers' },\r\n      { value: 'slide_off', label: 'Carousel' },\r\n      { value: 'noise', label: 'Noise' },\r\n      { value: 'noise_off', label: 'Static' }\r\n    ];\r\n\r\n    return (\r\n      <>\r\n        <div id=\"uiContainer\">\r\n          <div id=\"selectContainer\">\r\n            <Button onClick={this.helpClicked} variant=\"contained\">\r\n              Options\r\n            </Button>\r\n            <FormControl id=\"colorPicker\">\r\n              <InputLabel className='label MuiFormLabel-root MuiInputLabel-root label MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled' id=\"colorPickerLabel\">\r\n                Background\r\n              </InputLabel>\r\n              <ColorPicker\r\n                defaultValue={this.state.bgColor}\r\n                value={this.state.bgColor}\r\n                onChange={this.backgroundChanged}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Visual\r\n              </InputLabel>\r\n              <Select id=\"visualizerType\"\r\n                  value={this.state.visualizerType}\r\n                  variant=\"outlined\"\r\n                  onChange={this.visualizerChanged}>\r\n                    {visOptions.map((o) => <MenuItem value={o.value}>{o.label}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Palette\r\n              </InputLabel>\r\n              <Select id=\"paletteType\"\r\n                value={this.state.colorIndex}\r\n                variant=\"outlined\"\r\n                onChange={this.paletteChanged}>\r\n                  {ColorPalettes.map((p, index) => <MenuItem value={index}>{p.name}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n              <InputLabel className='label'>\r\n                Preset\r\n              </InputLabel>\r\n              <Select id=\"selectedPreset\"\r\n                label=\"Selected Preset\"\r\n                value={this.state.selectedPreset}\r\n                variant=\"outlined\"\r\n                onChange={this.onPresetSelected}>\r\n                  {this.state.presets.map((p: Preset, index: any) => <MenuItem value={index}>{p.presetName}</MenuItem>)}\r\n              </Select>\r\n            </FormControl>\r\n            <Button onClick={this.randomPreset} variant=\"contained\">\r\n              Random\r\n            </Button>\r\n            {this.isLocalHost && \r\n            <>\r\n            <TextField id=\"presetName\"\r\n                value={this.state.presetName}\r\n                placeholder=\"Preset Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.presetNameChanged} \r\n            />\r\n            <Button id=\"savePreset\" onClick={this.onSavePreset} disabled={this.state.presetName === \"\"} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            </>}\r\n          </div>\r\n          <div id=\"sliderContainer\">\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param1}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.param1}\r\n                  step={1}\r\n                  min={1}\r\n                  max={100}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param1Changed}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].param2}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.param2}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={3}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.param2Changed}\r\n                />\r\n              </FormControl>  \r\n            </div>\r\n            <div id=\"sliderContainer\">\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].spread}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={10}\r\n                  value={this.state.spread}\r\n                  step={0.5}\r\n                  min={0}\r\n                  max={1000}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.spreadChanged}\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <InputLabel className='label'>\r\n                  {this.sliderLabels[this.state.visualizerType].offset}\r\n                </InputLabel>\r\n                <Slider\r\n                  defaultValue={0.2}\r\n                  value={this.state.offset}\r\n                  step={0.1}\r\n                  min={0}\r\n                  max={20}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={this.offsetChanged}\r\n                />\r\n              </FormControl>   \r\n            </div>\r\n          </div>\r\n          <HelpDialog\r\n            open={this.state.showHelp}\r\n            close={() => this.setState({showHelp: false})}\r\n            setMicAsInput={this.setMicrophoneAsSource}\r\n            setSpeakerAsInput={this.setSpeakerAsSource}   \r\n          />\r\n        </div>\r\n        <Canvas onKeyDown={this.onKeyPressed} className={'App'}>\r\n          <CameraControls />\r\n          <ambientLight intensity={0.5} />\r\n          {this.renderVisualizer(this.state.visualizerType, this.state.spread, this.state.offset, this.state.param1, this.state.param2)}\r\n        </Canvas>\r\n        <div id=\"alert-text\"></div>\r\n      </>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}