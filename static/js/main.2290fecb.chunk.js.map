{"version":3,"sources":["ColorPalette.ts","MathUtils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["ColorPalettes","name","palette_6","palette_11","calculateVectorBetweenVectors","x1","x2","y1","y2","angle","Math","atan2","calculateAngleBetweenVectors","angleToVector","sin","cos","HorizontalLine","props","geoRef","useRef","lineRef","bufferLength","amplitudeArray","Uint8Array","linePoints","i","push","Vector2","random","useEffect","analyzer","frequencyBinCount","getByteFrequencyData","useFrame","current","setFromPoints","points","freqData","freqRange","waveFunc","nums","freqArray","subarray","start","end","freqAvg","length","reduce","a","b","y","pow","exp","abs","x","PI","Date","now","graphFrequencyData","ref","scale","attach","color","VerticalLine","Plane","freqRanges","material","set","loudestAmp","loudestBand","map","range","index","averageAmp","getColor","rotation","z","args","side","DoubleSide","Cube","Ring","scaleRate","vertices","offset","n","stepSize","t","indexStart","ringWidth","ringFuzz","verticesNeedUpdate","position","radius","ringSize","Bolt","Circle","average","bolt","circleFuzz","Racecar","hasSetMesh","useState","pos","setPos","size","setShape","geometry","newRotation","newPosition","loop","seperate","newT","speed","lineWidth","Vector3","calculatePosition","offaxis","lookAt","movementVector","Noise","Wire","QuadraticBezierCurve3","getPoints","flat","fuzz","useUpdate","App","dbUrl","isLocalHost","initializeAudioAnalyser","stream","audioContext","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","fftSize","smoothingTimeConstant","connect","setState","handleAudio","audioError","err","console","log","alert","visualizerChanged","e","visualizerType","target","value","paletteChanged","colorIndex","parseInt","presetNameChanged","presetName","spreadChanged","val","spread","offsetChanged","param1Changed","param1","param2Changed","param2","onSavePreset","state","axios","post","then","fetchPresets","catch","onPresetSelected","selectedPreset","presets","presetSelected","Boolean","window","location","hostname","match","navigator","mediaDevices","getUserMedia","audio","this","get","resp","data","fetch","headers","response","json","horizontalLines","verticalLines","circular","rings","solidColor","cube","wires","id","Select","variant","onChange","label","o","MenuItem","p","TextField","placeholder","Button","onClick","Slider","defaultValue","step","min","max","valueLabelDisplay","className","intensity","penumbra","renderVisualizer","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2290fecb.chunk.js","sourcesContent":["interface ColorPalette {\r\n    name: string;\r\n    palette_6: string[];\r\n    palette_11: string[];\r\n}\r\n\r\nexport const ColorPalettes: ColorPalette[] = [\r\n    {\r\n        name: 'Rainbow',\r\n        palette_6: [\"#A800FF\", \"#0079FF\", \"#00F11D\", \"#FFEF00\", \"#FF7F00\", \"#FF0900\"],\r\n        palette_11: [\"#8D5BFF\", \"#6D5BFF\", \"#5B8FFF\", \"#5BFFE7\", \"#5BFF76\", \"#CAFF5B\", \"#FFE05B\", \"#FFA75B\", \"#FF6B5B\", \"#FF5B89\", \"#FF2E37\"]\r\n    },\r\n    {\r\n        name: 'SL2T_1',\r\n        palette_6: [\"#46237A\", \"#FFB400\", \"#CFFFB3\", \"#337CA0\", \"#EE5622\", \"#3A5311\"],\r\n        palette_11: [\"#46237A\", \"#D1B1CB\", \"#DDCAD9\", \"#FFB400\", \"#EE5622\", \"#337CA0\", \"3891A6\", \"#2EC4B6\", \"#9FC490\", \"#CFFFB3\", \"#3A5311\"]\r\n    },\r\n    {\r\n        name: 'Cyberpunk',\r\n        palette_6: [\"#2d00f7\", \"#8900f2\", \"#b100e8\", \"#db00b6\", \"#f20089\", \"#faff00\"],\r\n        palette_11: [\"#2d00f7\", \"#6a00f4\", \"#8900f2\", \"#a100f2\", \"#b100e8\", \"#bc00dd\", \"#db00b6\", \"#e500a4\", \"#f20089\", \"#faff00\", \"#faff09\"]\r\n    },\r\n    {\r\n        name: 'Ocean',\r\n        palette_6: [\"#014f86\", \"#2c7da0\", \"#468faf\", \"#90e0ef\", \"#ade8f4\", \"#caf0f8\"],\r\n        palette_11: [\"#013a63\", \"#01497c\", \"#014f86\", \"#2a6f97\", \"#2c7da0\", \"#2c7da0\", \"#468faf\", \"#61a5c2\", \"#89c2d9\", \"#a9d6e5\", \"#caf0f8\"]\r\n    },\r\n    {\r\n        name: 'Sunset',\r\n        palette_6: [\"#d00000\", \"#dc2f02\", \"#e85d04\", \"#f48c06\", \"#faa307\", \"#ffba08\"],\r\n        palette_11: [\"#6a040f\",\"#d00000\",\"#dc2f02\", \"#dc2f02\", \"#e85d04\", \"#EE5622\", \"#f48c06\", \"#faa307\", \"#ffba12\", \"#ffba08\", \"#faff00\"]\r\n    },\r\n    {\r\n        name: 'Earth',\r\n        palette_6: [\"#606c38\", \"#283618\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"],\r\n        palette_11: [\"#606c38\", \"#ccd5ae\", \"#e9edc9\", \"#d4a373\", \"#edf2f4\", \"#283618\",\"#faedcd\", \"#fefae0\", \"#dda15e\", \"#bc6c25\", \"#6a040f\"]\r\n    },\r\n    {\r\n        name: 'Cherry Blossom',\r\n        palette_6: [\"#D6B95A\", \"#69306D\", \"#A5668B\", \"#4CBFAC\", \"#D00000\", \"#F2D7EE\"],\r\n        palette_11: [\"#D6B95A\", \"#DEFFF2\", \"#4CBFAC\", \"#F2D7EE\", \"#A1275D\", \"#FFFFFF\",\"#A1275D\", \"#F2D7EE\", \"#4CBFAC\", \"#DEFFF2\", \"#D6B95A\"]\r\n    },\r\n]\r\n\r\n// {\r\n//     name: '',\r\n//     palette_6: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\"],\r\n//     palette_11: [\"#\", \"#\", \"#\", \"#\", \"#\", \"#\",\"#\", \"#\", \"#\", \"#\", \"#\"]\r\n// },\r\n    ","export const vectorToAngle = (x: number, y: number): number => {\r\n    return Math.atan2(x, y)\r\n}\r\n\r\nexport const calculateAngleBetweenVectors = (x1: number, x2: number, y1: number, y2: number): number => {\r\n    return Math.atan2((x1 - x2), (y1 - y2))\r\n}\r\n\r\nexport const calculateVectorBetweenVectors = (x1: number, x2: number, y1: number, y2: number): [number, number] => {\r\n    const angle = calculateAngleBetweenVectors(x1, x2, y1, y2)\r\n    return angleToVector(angle)\r\n}\r\n\r\nexport const angleToVector = (angle: number): [number, number] => {\r\n    const xVector = Math.sin(angle)\r\n    const yVector = Math.cos(angle)\r\n\r\n    return [xVector, yVector]\r\n}","import ReactDOM from 'react-dom';\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Canvas, useFrame, useResource, useThree, useUpdate } from 'react-three-fiber';\r\nimport { BufferGeometry, CircleBufferGeometry, CircleGeometry, Color, EdgesGeometry, Geometry, LineBasicMaterial, Mesh, Points, Scene, Vector2, DoubleSide, CubicBezierCurve3, Vector3, QuadraticBezierCurve3} from 'three';\r\nimport './App.css';\r\nimport { Input, MenuItem, Select, TextField, Slider, Button } from '@material-ui/core';\r\nimport { ColorPalettes } from './ColorPalette';\r\nimport axios from 'axios';\r\nimport { calculateVectorBetweenVectors, vectorToAngle } from './MathUtils';\r\n\r\ninterface FrequencyRange {\r\n  start: number;\r\n  end: number;\r\n  color?: string;\r\n}\r\n\r\ninterface Preset {\r\n  presetName: string;\r\n  visualizerType: string,\r\n  colorIndex: number,\r\n  spread: number,\r\n  offset: number,\r\n  param1: number,\r\n  param2: number\r\n}\r\n\r\nfunction HorizontalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction VerticalLine(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].x = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].y)*0.65)*Math.cos(2*Math.PI*points[i].y + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <lineBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nfunction Plane(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <planeBufferGeometry ref={geoRef} args={[3,3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Cube(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n  const freqRanges: FrequencyRange[] = [\r\n    {start: 0, end: 2, color: '#CFFFB3'},\r\n    {start: 4, end:  10, color: '#337CA0'},\r\n    {start: 13, end:  22, color: '#46237A'},\r\n    {start: 40, end:  88, color: '#FFB400'},\r\n    {start: 100, end:  256, color: '#EE5622'},\r\n    {start: 500, end:  852, color: '#3A5311'}\r\n  ];\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 3.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(0, size + (-2*size*i/lineSegments)));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function getColor(){\r\n    let loudestAmp = 0;\r\n    let loudestBand = 0;\r\n    freqRanges.map((range, index) => {\r\n      const averageAmp = average(amplitudeArray.subarray(range.start, range.end));\r\n      if (averageAmp > loudestAmp) {\r\n        loudestBand = index;\r\n        loudestAmp = averageAmp;\r\n      }\r\n    });\r\n    return freqRanges[loudestBand].color;\r\n  }\r\n\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      lineRef.current.material.color.set(getColor());\r\n      lineRef.current.rotation.set(lineRef.current.rotation.x + 0.005, lineRef.current.rotation.y + 0.005, lineRef.current.rotation.z)\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}>\r\n      <boxBufferGeometry ref={geoRef} args={[3,3, 3]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={'purple'} side={DoubleSide} attach=\"material\"/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Ring(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function ringFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0));\r\n    const n = props.n > 2 ? props.n : 2;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = !props.indexStart ? i*stepSize : i+1.0*stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(n*t))*Math.cos(t + Date.now() * 0.001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(n*t))*Math.sin(t + Date.now() * 0.001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n     if (lineRef && lineRef.current && geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.vertices = ringFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n      geoRef.current.verticesNeedUpdate = true;\r\n      if (lineRef.current.scale.x > 10) {\r\n        lineRef.current.scale.set(0.01, 0.01, 1);\r\n        lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.radius, props.radius, 1]}>\r\n      <ringGeometry ref={geoRef} args={[1-(props.ringSize/2.0), 1+(props.ringSize/2.0), 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Bolt(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n  for (let i = 0; i < lineSegments; i++) {\r\n    linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n  }\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[ 1, 1, 1]}>\r\n      <circleBufferGeometry ref={geoRef} args={[1, 1024]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Circle(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const linePoints: Vector2[] = [];\r\n  const lineSegments = 500.0;\r\n  const size = 5.0;\r\n\r\n\r\n  useEffect(()=> {\r\n    for (let i = 0; i < lineSegments; i++) {\r\n      linePoints.push(new Vector2(size + (-2*size*i/lineSegments), Math.random()));\r\n    }\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector2[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    for (let i = 0; i < points.length; i++) {\r\n      points[i].y = (Math.pow(2, freqAvg/255.0) - 1)*Math.exp(-Math.abs(points[i].x)*0.65)*Math.cos(2*Math.PI*points[i].x + Date.now() / 400);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function circleFuzz(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    const offset = (freqAvg / (255.0))*0.1;\r\n    const stepSize = 2*Math.PI / points.length;\r\n    for (let i = 0; i < points.length; i++) {\r\n      const t = i+1 * stepSize; // i *stepsize\r\n      points[i].x = (props.ringWidth+offset*Math.cos(props.n*t))*Math.cos(t + Date.now() * 0.0001); // Math.random() > 0.5 ? points[i].x + offset : points[i].x - offset;\r\n      points[i].y = (props.ringWidth+offset*Math.cos(props.n*t))*Math.sin(t + Date.now() * 0.0001);// Math.random() > 0.5 ? points[i].y + offset : points[i].y - offset;\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      if (props.bolt) {\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.setFromPoints(graphFrequencyData(linePoints, amplitudeArray, props.freqRange));\r\n      }\r\n      else {\r\n        lineRef.current.scale.set(lineRef.current.scale.x + props.scaleRate, lineRef.current.scale.y + props.scaleRate, lineRef.current.scale.z);\r\n        props.analyzer.getByteFrequencyData(amplitudeArray);\r\n        geoRef.current.vertices = circleFuzz(geoRef.current.vertices, amplitudeArray, props.freqRange);\r\n        geoRef.current.verticesNeedUpdate = true;\r\n        if (lineRef.current.scale.x > 10) {\r\n          lineRef.current.scale.set(0.01, 0.01, 1);\r\n          lineRef.current.position.set(lineRef.current.position.x, lineRef.current.position.y, lineRef.current.position.z + 0.0001)\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[props.bolt ? 1 : props.radius, props.bolt ? 1 : props.radius, 1]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Racecar(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].x = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else{\r\n        const movementVector = calculateVectorBetweenVectors(lineRef.current.position.x, newPosition.x, newPosition.y, lineRef.current.position.y);\r\n        const angle = vectorToAngle(movementVector[0], movementVector[1]);\r\n        lineRef.current.rotation.z = angle+(Math.PI/2);\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n  \r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Noise(props: any) {\r\n  const geoRef = useRef<any>(null);\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const totalPoints = 500;\r\n  let hasSetMesh = false;\r\n\r\n  const [pos, setPos] = useState(0);\r\n\r\n\r\n  useEffect(()=> {\r\n    hasSetMesh = false;\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function setShape(vertices: Vector3[]){\r\n    const stepSize = 2*Math.PI / vertices.length;\r\n    for (let i = 0; i < vertices.length; i++) {\r\n      const t = i+1 * stepSize;\r\n      vertices[i].z = (props.size*Math.cos(props.n*t))*Math.cos(t);\r\n      vertices[i].y = (props.size*Math.cos(props.n*t))*Math.sin(t);\r\n    }\r\n  }\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n\r\n  function calculatePosition(freqData: Uint8Array){\r\n    const freqArray = freqData.subarray(props.freqRange.start, props.freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.loop){\r\n      let t: number;\r\n      if (props.seperate){\r\n        const newT = pos+((freqAvg/255.0)+0.15)*(props.speed/1000.0);\r\n        t = newT > (Math.PI) ? (Math.PI*-1) : newT;\r\n        setPos(t);\r\n      }\r\n      else {\r\n        t = (Math.PI/(2.0*props.speed*2.5))*(Date.now()%(props.speed*10))-(Math.PI/4.0)+(freqAvg/255.0)*0.5;\r\n      }\r\n      let x = (props.lineWidth*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));\r\n      let y = (props.lineWidth*Math.sin(t)*Math.cos(t))/(1+Math.pow(Math.sin(t), 2));;\r\n      return new Vector3(x, y, 0);\r\n    }\r\n    else {\r\n      return lineRef.current.position.x > 8 ? new Vector3(-8,0,0): new Vector3(lineRef.current.position.x + ((freqAvg/255.0)+0.4)*(props.speed/1000.0),0,0);\r\n    }\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (lineRef && lineRef.current && !hasSetMesh) {\r\n      setShape(lineRef.current.geometry.vertices);\r\n      lineRef.current.geometry.verticesNeedUpdate = true;\r\n      lineRef.current.rotation.x = 0;\r\n      lineRef.current.rotation.y = 0;\r\n      lineRef.current.rotation.z = 0;\r\n      hasSetMesh = true;\r\n    }\r\n    if (lineRef && lineRef.current && geoRef && !!props.analyzer && amplitudeArray) {\r\n      let newRotation: Vector3;\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      const newPosition = calculatePosition(amplitudeArray);\r\n      if (props.offaxis && props.loop){\r\n        newRotation=new Vector3(newPosition.x - lineRef.current.position.x, newPosition.y - lineRef.current.position.y, 0);\r\n        lineRef.current.lookAt(newRotation)\r\n      }\r\n      else if (props.offaxis && !props.loop) {\r\n        lineRef.current.lookAt(new Vector3(0,1,0));\r\n      }\r\n      else {\r\n        lineRef.current.lookAt(new Vector3(newPosition.x, newPosition.y, 1));\r\n      }\r\n      lineRef.current.position.x = newPosition.x;\r\n      lineRef.current.position.y = newPosition.y;\r\n      lineRef.current.position.z = newPosition.z;\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[10, 10, 10]}>\r\n      <circleGeometry ref={geoRef} args={[1, 500]} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Wire(props: any) {\r\n  const lineRef = useRef<any>(null);\r\n\r\n  let bufferLength = 0;\r\n  let amplitudeArray = new Uint8Array(0);\r\n\r\n  // Initialize vertices\r\n  const curve = new QuadraticBezierCurve3(\r\n    new Vector3( 0, 1, 0 ),\r\n    new Vector3( 0, 0.25, 0.2 ),\r\n    new Vector3( 0, 0, 1 )\r\n  );\r\n\r\n  const points = curve.getPoints(1024);\r\n\r\n  useEffect(()=> {\r\n    if (!!props.analyzer && bufferLength == 0) {\r\n      bufferLength = props.analyzer.frequencyBinCount;\r\n      amplitudeArray = new Uint8Array(bufferLength);\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n    }\r\n  });\r\n\r\n  function average(nums: Uint8Array) {\r\n    return nums.reduce((a, b) => (a + b)) / nums.length;\r\n  }\r\n\r\n  function graphFrequencyData(points: Vector3[], freqData: Uint8Array, freqRange: FrequencyRange, waveFunc?: string ) {\r\n    const freqArray = freqData.subarray(freqRange.start, freqRange.end);\r\n    const freqAvg = freqArray.length > 0 ? average(freqArray) : 0;\r\n    if (props.flat) {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].y = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z);\r\n      }\r\n    }\r\n    else if (props.fuzz){\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = Math.random()*(freqAvg/(255.0));\r\n      }\r\n    } else {\r\n      for (let i = 0; i < points.length; i++) {\r\n        points[i].x = (freqAvg/(255.0*10))*Math.exp(-Math.abs(points[i].z)*0.65)*Math.cos(2*Math.PI*points[i].z); \r\n      }\r\n    }\r\n    return points;\r\n  }\r\n\r\n  useFrame(() => {\r\n    if (geoRef && geoRef.current && !!props.analyzer && amplitudeArray) {\r\n      props.analyzer.getByteFrequencyData(amplitudeArray);\r\n      geoRef.current.setFromPoints(graphFrequencyData(points, amplitudeArray, props.freqRange));\r\n    }\r\n  });\r\n\r\n  const geoRef = useUpdate((geometry: BufferGeometry) => {\r\n    geometry.setFromPoints(points)\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <line\r\n      ref={lineRef}\r\n      {...props}\r\n      scale={[1, 1, 1]}\r\n      rotation={[0, 30*Math.PI/180, 0]}>\r\n      <bufferGeometry ref={geoRef} attach=\"geometry\" />\r\n      <meshBasicMaterial color={props.color} />\r\n    </line>\r\n  );\r\n}\r\n\r\nexport default class App extends React.Component<any, any> {\r\n  private dbUrl: string;\r\n  private isLocalHost: Boolean;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      analyzer: null, \r\n      visualizerType: \"racecar\",\r\n      spread: 1,\r\n      offset: 1.3,\r\n      param1: 2,\r\n      param2: 0.2,\r\n      colorIndex: 0,\r\n      presetName: \"\",\r\n      presetSelected: \"\",\r\n      presets: []\r\n    };\r\n    this.dbUrl = \"http://localhost:3001/presets\";\r\n    this.isLocalHost  = Boolean(\r\n      window.location.hostname === 'localhost' ||\r\n      window.location.hostname === '[::1]' ||\r\n      window.location.hostname.match(\r\n          /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  }\r\n\r\n  componentDidMount(){\r\n    navigator.mediaDevices.getUserMedia({audio: true })\r\n      .then(this.handleAudio)\r\n      .catch(this.audioError);\r\n    this.fetchPresets();\r\n  }\r\n\r\n  fetchPresets(){\r\n    if (!this.isLocalHost){\r\n      fetch('presetDb.json', {\r\n        headers : { \r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n         }\r\n      }\r\n      )\r\n        .then(function(response){\r\n          return response.json();\r\n        })\r\n        .then((json) => {\r\n          this.setState({presets: json.presets})\r\n        });\r\n    }\r\n    else {\r\n      axios.get(this.dbUrl).then((resp) => this.setState({presets: resp.data}));\r\n    }\r\n  }\r\n\r\n  initializeAudioAnalyser = (stream: MediaStream) => {\r\n    const audioContext = new AudioContext();\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 2048;\r\n    analyser.smoothingTimeConstant = 0.5;\r\n    source.connect(analyser);\r\n    this.setState({\r\n      analyzer: analyser\r\n    })\r\n  }\r\n\r\n  handleAudio = (stream: MediaStream) => {\r\n    this.initializeAudioAnalyser(stream);\r\n  }\r\n\r\n  audioError = (err: any) => {\r\n    console.log(err);\r\n    alert(\"Something went wrong: \" + err.name);\r\n  }\r\n\r\n  horizontalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[0, (spread*-2) - offset, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[0, (spread*-1) - offset, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[0, 0 - offset, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[0, (spread*1) - offset, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[0, (spread*2) - offset, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <HorizontalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[0, (spread*3) - offset, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  solidColor() {\r\n    return (\r\n      <>\r\n        <Plane analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  cube() {\r\n    return (\r\n      <>\r\n        <Cube analyzer={this.state.analyzer} position={[0,0,0]} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  bolt() {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Bolt analyzer={this.state.analyzer} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  circular(n: number, ringWidth: number) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Circle analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  Racecar(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Racecar analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  Noise(n: number, size: number, speed: number, lineWidth: number, loop: boolean, seperate: boolean, offaxis?: boolean) {\r\n    const numCircles = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numCircles;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n        <Noise analyzer={this.state.analyzer} n={n} size={size} speed={speed} lineWidth={lineWidth} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} loop={loop} seperate={seperate} offaxis={offaxis}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  rings(ringSize: number, indexStart: number, n: number, ringWidth: number) {\r\n    const numRings = 6;\r\n    const maxRadius = 10;\r\n    const radiusScale=maxRadius/numRings;\r\n    const scaleRate=0.01;\r\n    return (\r\n      <>\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={5*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[0]} freqRange={{start: 0, end:  2}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={4*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[1]} freqRange={{start: 4,  end:  10}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={3*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[2]} freqRange={{start: 13, end:  22}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={2*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[3]} freqRange={{start: 40, end:  88}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={1*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[4]} freqRange={{start: 100, end:  256}} />\r\n        <Ring analyzer={this.state.analyzer} n={n} ringWidth={ringWidth} indexStart={indexStart} scaleRate={scaleRate} radius={0*radiusScale+scaleRate} ringSize={ringSize} color={ColorPalettes[this.state.colorIndex].palette_6[5]} freqRange={{start: 280, end:  500}} />\r\n      </>\r\n    )\r\n  }\r\n\r\n  verticalLines(offset: number, spread: number) {\r\n    return (\r\n      <>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[0]} position={[(spread*-2) - offset, 0, -1]} freqRange={{start: 0, end:  2}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[1]} position={[(spread*-1) - offset, 0, -1]} freqRange={{start: 4,  end:  10}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[2]} position={[ 0 - offset, 0, -1]}  freqRange={{start: 13, end:  22}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[3]} position={[(spread*1) - offset, 0, -1]} freqRange={{start: 40, end:  88}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[4]} position={[(spread*2) - offset, 0, -1]} freqRange={{start: 100, end:  256}}/>\r\n        <VerticalLine analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_6[5]} position={[(spread*3) - offset, 0, -1]} freqRange={{start: 280, end:  500}}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  wires(spread: number, flat: boolean) {\r\n    return (\r\n      <>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[0]} freqRange={{start: 0, end:  2}} position = {[0,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[1]} freqRange={{start: 4, end:  10}} position = {[0 + spread,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[2]} freqRange={{start: 12, end:  16}} position = {[0 + spread*2,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[3]} freqRange={{start: 18, end:  22}} position = {[0 + spread*3,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[4]} freqRange={{start: 40, end:  60}} position = {[0 + spread*4,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[5]} freqRange={{start: 62, end:  80}} position = {[0 + spread*5,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[6]} freqRange={{start: 82, end:  100}} position = {[0 + spread*6,0,0]}  flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[7]} freqRange={{start: 100, end:  140}} position = {[0 + spread*7,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[8]} freqRange={{start: 146, end:  190}} position = {[0 + spread*8,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[9]} freqRange={{start: 264, end:  542}} position = {[0 + spread*9,0,0]} flat={flat}/>\r\n        <Wire analyzer={this.state.analyzer} color={ColorPalettes[this.state.colorIndex].palette_11[10]} freqRange={{start: 550, end:  852}} position = {[0 + spread*10,0,0]}  flat={flat}/>\r\n      </>\r\n    )\r\n  }\r\n\r\n  renderVisualizer(visualizerType: string, spread: number, offset: number, param1: number, param2: number){\r\n    switch(visualizerType) { \r\n      case \"horizontalLines\": { \r\n        return this.horizontalLines(spread, offset);\r\n      }\r\n      case \"verticalLines\": { \r\n        return this.verticalLines(spread, offset);\r\n      }\r\n      case \"circular\": { \r\n        return this.circular(param1, param2);\r\n      }\r\n      case \"bolt\": { \r\n        return this.bolt();\r\n      } \r\n      case \"rings\": { \r\n        return this.rings(0.02, 1, param1, param2);\r\n      } \r\n      case \"fractal\": { \r\n        return this.rings(0.02, 0, param1, param2);\r\n      } \r\n      case \"solid\": { \r\n        return this.solidColor();\r\n      }\r\n      case \"cube\": { \r\n        return this.cube();\r\n      }\r\n      case \"wires\": { \r\n        return this.wires(spread, false);\r\n      }\r\n      case \"flat\": { \r\n        return this.wires(spread, true);\r\n      }\r\n      case \"racecar\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"trails\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, false);\r\n      }\r\n      case \"slide\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, false);\r\n      }\r\n      case \"noise\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, false);\r\n      }\r\n      case \"racecar_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      case \"trails_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, true, false, true);\r\n      }\r\n      case \"slide_off\": { \r\n        return this.Racecar(param1, param2, spread, offset, false, false, true);\r\n      }\r\n      case \"noise_off\": { \r\n        return this.Noise(param1, param2, spread, offset, true, true, true);\r\n      }\r\n      default: {\r\n        return this.circular(param1, param2);\r\n      } \r\n   } \r\n  }\r\n\r\n  visualizerChanged = (e: any) => {\r\n    this.setState({visualizerType: e.target.value});\r\n  }\r\n  \r\n  paletteChanged = (e: any) => {\r\n    this.setState({colorIndex: parseInt(e.target.value)});\r\n  }\r\n\r\n  presetNameChanged = (e: any) => {\r\n    this.setState({presetName: e.target.value});\r\n  }\r\n  \r\n  spreadChanged = (e: any, val: any) => {\r\n    this.setState({spread: val});\r\n  }\r\n\r\n  offsetChanged = (e: any, val: any) => {\r\n    this.setState({offset: val});\r\n  }\r\n\r\n  param1Changed = (e: any, val: any) => {\r\n    this.setState({param1: val});\r\n  }\r\n\r\n  param2Changed = (e: any, val: any) => {\r\n    this.setState({param2: val});\r\n  }\r\n\r\n  onSavePreset = (e: any) => {\r\n    let state: Preset = {\r\n      presetName: this.state.presetName,\r\n      visualizerType: this.state.visualizerType,\r\n      colorIndex: this.state.colorIndex,\r\n      spread: this.state.spread,\r\n      offset: this.state.offset,\r\n      param1: this.state.param1,\r\n      param2: this.state.param2\r\n    }\r\n    axios.post(this.dbUrl, state).then(()=> {\r\n      this.fetchPresets();\r\n      this.setState({presetName: \"\"});\r\n    }).catch((err) => console.log(err));\r\n  }\r\n\r\n  onPresetSelected = (e: any) => {\r\n    let selectedPreset = this.state.presets[e.target.value];\r\n    this.setState({ visualizerType: selectedPreset.visualizerType,\r\n      colorIndex: selectedPreset.colorIndex,\r\n      spread: selectedPreset.spread,\r\n      offset: selectedPreset.offset,\r\n      param1: selectedPreset.param1,\r\n      param2: selectedPreset.param2\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const visOptions = [\r\n      { value: 'horizontalLines', label: 'Horizontal Lines' },\r\n      { value: 'verticalLines', label: 'Vertical Lines' },\r\n      { value: 'circular', label: 'Circles' },\r\n      { value: 'bolt', label: 'Lightning' },\r\n      { value: 'rings', label: 'Rings' },\r\n      { value: 'solid', label: 'Solid' },\r\n      { value: 'cube', label: 'Cube' },\r\n      { value: 'wires', label: \"Wires\"},\r\n      { value: 'flat', label: \"Flat\"},\r\n      { value: 'fractal', label: 'Fractal' },\r\n      { value: 'racecar', label: 'Race' },\r\n      { value: 'trails', label: 'Trails' },\r\n      { value: 'slide', label: 'Slide' },\r\n      { value: 'racecar_off', label: 'Helix' },\r\n      { value: 'trails_off', label: 'Layers' },\r\n      { value: 'slide_off', label: 'Carousel' },\r\n      { value: 'noise', label: 'Noise' },\r\n      { value: 'noise_off', label: 'Static' }\r\n    ];\r\n\r\n    return (\r\n      <>\r\n        <div id=\"uiContainer\">\r\n          <div id=\"selectContainer\">\r\n            <Select id=\"visualizerType\"\r\n                value={this.state.visualizerType}\r\n                variant=\"outlined\"\r\n                onChange={this.visualizerChanged}>\r\n                  {visOptions.map((o) => <MenuItem value={o.value}>{o.label}</MenuItem>)}\r\n            </Select>\r\n            <Select id=\"paletteType\"\r\n                value={this.state.colorIndex}\r\n                variant=\"outlined\"\r\n                onChange={this.paletteChanged}>\r\n                  {ColorPalettes.map((p, index) => <MenuItem value={index}>{p.name}</MenuItem>)}\r\n            </Select>\r\n            <Select id=\"selectedPreset\"\r\n                value={this.state.selectedPreset}\r\n                label=\"Selected Preset\"\r\n                variant=\"outlined\"\r\n                onChange={this.onPresetSelected}>\r\n                  {this.state.presets.map((p: Preset, index: any) => <MenuItem value={index}>{p.presetName}</MenuItem>)}\r\n            </Select>\r\n            {this.isLocalHost && \r\n            <>\r\n            <TextField id=\"presetName\"\r\n                value={this.state.presetName}\r\n                placeholder=\"Preset Name\"\r\n                variant=\"outlined\"\r\n                onChange={this.presetNameChanged} \r\n            />\r\n            <Button onClick={this.onSavePreset} variant=\"contained\">\r\n              Save\r\n            </Button>\r\n            </>}\r\n          </div>\r\n          <div id=\"sliderContainer\">\r\n            <Slider\r\n              defaultValue={10}\r\n              value={this.state.param1}\r\n              step={1}\r\n              min={1}\r\n              max={100}\r\n              valueLabelDisplay=\"on\"\r\n              onChange={this.param1Changed}\r\n            />\r\n            <Slider\r\n              defaultValue={0.2}\r\n              value={this.state.param2}\r\n              step={0.1}\r\n              min={0}\r\n              max={3}\r\n              valueLabelDisplay=\"on\"\r\n              onChange={this.param2Changed}\r\n            />\r\n             <Slider\r\n              defaultValue={10}\r\n              value={this.state.spread}\r\n              step={0.5}\r\n              min={0}\r\n              max={1000}\r\n              valueLabelDisplay=\"on\"\r\n              onChange={this.spreadChanged}\r\n            />\r\n            <Slider\r\n              defaultValue={0.2}\r\n              value={this.state.offset}\r\n              step={0.1}\r\n              min={0}\r\n              max={20}\r\n              valueLabelDisplay=\"on\"\r\n              onChange={this.offsetChanged}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Canvas className={'App'}>\r\n          <ambientLight intensity={0.5} />\r\n          <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} />\r\n          <pointLight position={[-10, -10, -10]} />\r\n          {this.renderVisualizer(this.state.visualizerType, this.state.spread, this.state.offset, this.state.param1, this.state.param2)}\r\n        </Canvas>\r\n      </>\r\n      \r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}